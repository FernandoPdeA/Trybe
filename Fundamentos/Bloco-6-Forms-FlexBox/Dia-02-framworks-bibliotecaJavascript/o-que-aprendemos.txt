O que vamos aprender?
Hoje voc√™ aprender√° como adicionar bibliotecas JavaScript e CSS aos seus sites.
Existem literalmente milhares de bibliotecas JavaScript e CSS dispon√≠veis gratuitamente na Internet, com os mais diversos prop√≥sitos. √Ä medida que os sites que voc√™ desenvolve se tornam mais complexos, ser√° preciso encontrar e integrar ferramentas que facilitem e acelerem o desenvolvimento.



Voc√™ ser√° capaz de:
Adicionar e utilizar bibliotecas JavaScript e CSS em seus sites;
Utilizar bibliotecas JavaScript externas a partir de uma CDN.



Por que isso √© importante?
No dia a dia do desenvolvimento de software, voc√™ vai precisar encontrar, selecionar e incorporar bibliotecas aos programas que voc√™ desenvolve. √â muito importante conhecer os fundamentos de uma tecnologia, mas √© importante tamb√©m n√£o reinventar a roda a todo momento. Por exemplo, imagine que voc√™, toda vez que precisasse calcular a raiz quadrada de um n√∫mero, tivesse que escrever uma fun√ß√£o para isso, talvez utilizando uma f√≥rmula matem√°tica complexa! üò®Para que isso n√£o seja necess√°rio, outras pessoas j√° se deram o trabalho de escrever esse tipo de fun√ß√£o de forma extremamente otimizada e disponibilizar para que outras pessoas utilizem.
O mesmo princ√≠pio se aplica ao desenvolvimento web. Existem muitos problemas que aparecem com frequ√™ncia, √† medida que a complexidade dos seus sites aumenta. Por exemplo, na aula anterior voc√™ aprendeu a construir formul√°rios HTML. Imagine que, em um formul√°rio de cadastro, voc√™ quer garantir que o nome e sobrenome sempre sejam preenchidos, que o email da pessoa tenha um formato v√°lido e que seja imposs√≠vel selecionar uma data de nascimento inexistente. Al√©m disso, voc√™ acha que ficar digitando a data manualmente √© cansativo, e quer colocar um campo que, ao ser clicado, abre um calend√°rio para escolher a data. Como voc√™ faria isso? Com JavaScript (e um pouco de muito CSS, no caso do calend√°rio). Isso, por√©m, √© algo t√£o comum que j√° existem bibliotecas que fornecem essas funcionalidades prontas para voc√™.
Da mesma forma, existem muitos frameworks CSS que facilitam a constru√ß√£o de sites din√¢micos, acess√≠veis e responsivos, coisas com as quais voc√™ deve se preocupar sempre daqui para frente. Alguns exemplos mais famosos: Bulma, Bootstrap, Semantic UI e Materialize.



Conte√∫do
Quais p√°ginas Web voc√™ j√° visitou hoje? √â bem prov√°vel que em pelo menos uma delas voc√™ precisou interagir com a aplica√ß√£o de alguma forma - como preenchendo um formul√°rio para ter acesso, visualizando imagens a medida que a p√°gina carrega, validando um campo de e-mail/senha.
Essas intera√ß√µes s√£o bastante repetitivas e a grande maioria das pessoas desenvolvedoras reutilizam c√≥digos para evitar perder tempo implementando funcionalidades j√° desenvolvidas. Para isso, utilizamos bibliotecas, que s√£o arquivos em Javascript com fun√ß√µes que podem ser reutilizadas.
No v√≠deo voc√™ pode ter uma no√ß√£o da variedade de bibliotecas JavaScript dispon√≠veis e de como elas podem te ajudar nas mais variadas tarefas.

Como vimos, a documenta√ß√£o da biblioteca cont√©m as instru√ß√µes sobre como instal√°-la e uma lista com as fun√ß√µes dispon√≠veis para voc√™ utilizar. A documenta√ß√£o deve ser sempre a sua principal fonte de informa√ß√£o, e saber ler documenta√ß√µes √© fundamental na sua carreira como pessoa desenvolvedora. Quando uma pessoa programadora cria uma biblioteca, a sua inten√ß√£o √© compartilh√°-la com toda a comunidade e, para isso, ela ir√° se esfor√ßar para escrever uma documenta√ß√£o com bons exemplos para podermos reutilizar fun√ß√µes que s√£o corriqueiras - como manipular datas, exibir alertas, validar campos, dentre outras.
Algumas bibliotecas t√™m o seu pr√≥prio servidor. Outras, s√£o distribu√≠das a partir de uma CDN externa. Uma CDN (Content Delivery Network) √© uma rede de servidores para a distribui√ß√£o de conte√∫dos. Ela armazena r√©plicas de conte√∫dos de outros sites e os entrega para a pessoa usu√°ria. Essa distribui√ß√£o √© baseada na localiza√ß√£o geogr√°fica do visitante. Assim, a pessoa usu√°ria ser√° conectada ao servidor mais pr√≥ximo, diminuindo o tempo de lat√™ncia (transfer√™ncia de dados).
A biblioteca que vimos no v√≠deo, Moment, tamb√©m est√° dispon√≠vel via CDN e voc√™ pode acess√°-la aqui. A cdnjs hospeda v√°rias bibliotecas que voc√™ aprender√° mais para frente, como React JS. O grande benef√≠cio de se utilizar uma biblioteca atrav√©s de CDNs √© que os seus servidores s√£o otimizados para servir arquivos est√°ticos como bibliotecas Javascript rapidamente. No entanto, a maioria dos sites que disponibilizam bibliotecas preferem hosped√°-las em servidores pr√≥prios para ter mais controle sobre o conte√∫do e otimiz√°-los, como incorporando mais de uma biblioteca em um arquivo para se ter mais recursos e performance.
H√° milhares de bibliotecas JavaScript que ir√£o te auxiliar em diversas tarefas, como:
Layout da p√°gina;
Acessibilidade;
Manipula√ß√£o DOM;
Efeitos e anima√ß√£o;
Gr√°ficos e quadros;
Suporte para dispositivos m√≥veis;
Diante de tantas op√ß√µes e funcionalidades, como decidir qual biblioteca utilizar? A verdade √© que n√£o h√° uma resposta correta para essa pergunta, e a escolha de qual biblioteca usar √© fundamental no trabalho de uma pessoa desenvolvedora - afinal, voc√™ come√ßar√° a escrever c√≥digos tendo como base qual biblioteca utilizar e mudar de ideia quando a p√°gina j√° est√° em desenvolvimento pode ser uma tarefa dif√≠cil.
Para tomar a melhor decis√£o, voc√™ pode pensar na sua aplica√ß√£o a partir da sua composi√ß√£o. Uma p√°gina Web √© composta por uma interface com a pessoa usu√°ria (HTML e CSS), por elementos de interatividade (Javascript e DOM) e por um banco de dados (que tamb√©m pode ser acessado por Javascript). Algumas bibliotecas s√£o espec√≠ficas para a interface com a pessoa usu√°ria, enquanto que outras podem ser utilizadas em diferentes partes da aplica√ß√£o, como podemos ver no esquema abaixo:

Diagrama bibliotecas Javascript.
Bibliotecas que "fazem de tudo" s√£o chamadas de frameworks. Elas atuam desde a recupera√ß√£o de dados at√© a manipula√ß√£o do DOM e interface com a pessoa usu√°ria. Por outro lado, por fazer coisas demais, em algumas situa√ß√µes usar bibliotecas menores pode ser mais vantajoso, pois elas s√£o focadas em tarefas espec√≠ficas. Ainda assim, h√° muitas vantagens em se usar frameworks. No v√≠deo abaixo, voc√™ aprender√° um pouco mais sobre um Framework CSS muito utilizado para criar p√°ginas com design responsivo: o Bootstrap.
Voc√™ aprender√° a adicionar o Bootstrap ao seu site, fazendo download dos arquivos JavaScript e CSS para seu computador.

Al√©m do Bootstrap, voc√™ tamb√©m pode usar bibliotecas que melhoram a experi√™ncia de navega√ß√£o da pessoa usu√°ria. A biblioteca mais popular para manipula√ß√£o do DOM √© a jQuery, que vimos no v√≠deo.
Conforme as suas p√°ginas crescem, voc√™ sentir√° a necessidade de usar bibliotecas que te auxiliar√£o na defini√ß√£o da arquitetura da sua aplica√ß√£o. Logo mais, quando chegarmos no m√≥dulo Frontend, voc√™ ir√° aprender uma biblioteca que √© muito utilizada para construir user interfaces: o React JS.
Algumas bibliotecas s√£o bem pontuais, e s√£o utilizadas para tarefas espec√≠ficas. Alguns exemplos de microbibliotecas s√£o:
moment.js, que j√° vimos no primeiro v√≠deo, tem fun√ß√µes para valida√ß√£o, manipula√ß√£o e visualiza√ß√£o de data e hora;
highcharts √© utilizado para criar gr√°ficos interativos;
Bibliotecas de teste, como a spoiler alert React Testing Library. Aprenderemos mais sobre ela no m√≥dulo de Frontend!
Como voc√™ pode perceber, h√° milhares de bibliotecas dispon√≠veis e n√£o tem uma resposta correta para qual biblioteca voc√™ deve usar. No entanto, voc√™ pode fazer algumas considera√ß√µes na hora de definir qual biblioteca mais se adequa ao produto que voc√™ est√° desenvolvendo. √â interessante ponderar como ser√° a experi√™ncia do time de desenvolvimento com a biblioteca e como ser√° a experi√™ncia da pessoa usu√°ria:
A biblioteca trar√° uma boa experi√™ncia para quem a desenvolve?
Bem documentada: a biblioteca deve ser de f√°cil entendimento, com demonstra√ß√µes de uso real e um guia sobre como utiliz√°-la. Se uma biblioteca n√£o tem uma documenta√ß√£o, este pode ser um ind√≠cio de que ela pode n√£o ser t√£o amig√°vel assim para time de desenvolvimento. Prefira bibliotecas com uma documenta√ß√£o acess√≠vel;
Flex√≠vel: √© f√°cil alterar as op√ß√µes de configura√ß√£o da funcionalidade que voc√™ gostaria de usar? Muitas vezes, a biblioteca pode ter demonstra√ß√µes impressionantes, mas ser engessada para um uso espec√≠fico;
Atualizada: o mundo da Internet est√° em constante mudan√ßa. Bibliotecas podem parar de funcionar por depender de alguma caracter√≠stica espec√≠fica de um navegador que foi atualizado. Verifique se a biblioteca que voc√™ quer utilizar est√° sempre ativa e atualizada;
Testada: todas as bibliotecas devem incluir testes que garantem que as suas funcionalidades s√£o executadas como o esperado.
C√≥digo limpo: algumas vezes tratamos a biblioteca como uma caixa preta, e n√£o damos tanta import√¢ncia para o c√≥digo que implementa as suas funcionalidades. Mas pode acontecer de voc√™ precisar entend√™-lo, caso voc√™ encontre algum bug que pode estar relacionado √† biblioteca, por exemplo. D√™ uma olhada nos c√≥digos da biblioteca e veja se ele √© f√°cil de ser lido, com trechos comentados.
Comunidade ativa: voc√™ vai ter d√∫vidas, e voc√™ ir√° encontrar bugs nas bibliotecas que usar√° como pessoa desenvolvedora. A melhor forma de tirar d√∫vidas e resolver bugs √© junto com outras pessoas desenvolvedoras em uma comunidade ativa.
Se a biblioteca √© hospedada em sites como o GitHub, algumas dicas para conferir se a biblioteca √© uma boa escolha √© olhar o n√∫mero de Forks ou o n√∫mero de estrelas. Esses n√∫meros s√£o um bom indicativo sobre a quantidade de pessoas desenvolvedoras e pessoas programadoras que est√£o utilizando a biblioteca. Algumas podem atingir milhares de Forks! Voc√™ pode conferir tamb√©m se h√° muitos problemas em aberto. Se sim, isso pode ser um sinal de que a comunidade n√£o est√° muito empenhada em resolv√™-los.
Al√©m dessas dicas, observe tamb√©m como a comunidade externa est√° utilizando a biblioteca. As perguntas no StackOverflow s√£o respondidas? N√£o deixe de buscar na Internet pelo nome da biblioteca que voc√™ quer utilizar e analise bem os resultados retornados.
A biblioteca trar√° uma boa experi√™ncia para a pessoa usu√°ria?
Acessibilidade: verifique se a biblioteca que voc√™ quer usar tem recursos que tornar√£o a sua aplica√ß√£o acess√≠vel para qualquer pessoa usu√°ria - inclusive pessoas com defici√™ncia.
Responsividade: se a pessoa usu√°ria for utilizar a aplica√ß√£o em um dispositivo m√≥vel, a biblioteca deve funcionar bem para o dispositivo. Os bot√µes s√£o grandes o bastante e respondem ao toque?
Suporte ao navegador: algumas bibliotecas podem n√£o suportar todos os navegadores. Elas podem ter sido projetadas para navegadores de dispositivos m√≥veis, ou simplesmente n√£o s√£o compat√≠veis com navegadores mais antigos. Verifique se a sua biblioteca funciona bem para o navegador que voc√™ deseja.
Com muita pr√°tica, experi√™ncia e conversando com outras pessoas desenvolvedoras voc√™ criar√° uma lista com as suas bibliotecas favoritas!
Vamos ver na pr√°tica como estilizar um formul√°rio, como o que criamos na √∫ltima aula, com o Bootstrap? Voc√™ ver√° como bibliotecas CSS facilitam (e muito!) a nossa vida üòâ. Aproveite para colocar em pr√°tica o que voc√™ aprendeu sobre bibliotecas em alguma p√°gina que voc√™ j√° criou!




Vamos praticar!
Agora que voc√™ j√° entendeu como utilizar bibliotecas JavaScript nas suas p√°ginas, √© hora de praticarmos!
Aula ao vivo! Vamos para o Slack, onde o link estar√° dispon√≠vel.



Exerc√≠cios
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/6.2 (bloco 6, dia 2)
Copiar
$ git checkout -b exercicios/6.2
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-6-html-e-css-forms-flexbox-e-responsivo
$ cd bloco-6-html-e-css-forms-flexbox-e-responsivo
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-2-bibliotecas-javascript-e-frameworks-css
$ cd dia-2-bibliotecas-javascript-e-frameworks-css
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-6-html-e-css-forms-flexbox-e-responsivo/dia-2-bibliotecas-javascript-e-frameworks-css. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/6.2
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/6.2)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/6.2 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/6.2
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/6.2, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº




Agora a pr√°tica
Adicione um framework CSS de sua escolha ao formul√°rio que voc√™ construiu na √∫ltima aula e o utilize para estilizar o formul√°rio.
Sugest√µes: Bulma, Bootstrap, Semantic UI e Materialize.



B√¥nus
Adicione uma biblioteca JavaScript de date picker ao formul√°rio que voc√™ construiu na √∫ltima aula. Utilize essa biblioteca no campo "Data", respons√°vel por receber a data escolhida para a viagem no formul√°rio. Como a bliblioteca ser√° usada pora validar as datas escolhidas pela pessoa usu√°ria, remova as valida√ß√µes de data usadas previamente e aplique as valida√ß√µes da biblioteca. Lembre-se que, ao selecionar o tipo do input atrav√©s do type, voc√™ est√° criando uma forma de valida√ß√£o tamb√©m.
Sugest√µes: DatePickerX e Pikaday.
spoiler-alert: a leitura de documenta√ß√µes pode parecer algo complexo de in√≠cio mas √© extremamente normal se voc√™ sentir alguma dificuldade. Algumas bibliotecas ter√£o uma maneira mais direta de mostrar as informa√ß√µes, como √© o caso da DatePickerX que indicamos acima. Outras tendem a ser mais detalhadas e exigem um pouco mais de aten√ß√£o na leitura, o que pode parecer mais dif√≠cil a princ√≠pio, como a Pikaday, que tamb√©m te indicamos. Sugerimos que voc√™ leia as duas documenta√ß√µes e escolha a que voc√™ compreender melhor a utiliza√ß√£o. E n√£o se preocupe, pois ler documenta√ß√µes far√° parte de sua rotina na sua vida de pessoa desenvolvedora, e a experi√™ncia junto com a pr√°tica torna tudo mais intuitivo e simples.
Adicione uma biblioteca JavaScript de valida√ß√µes ao formul√°rio que voc√™ construiu na √∫ltima aula. Utilize essa biblioteca para substituir as valida√ß√µes que voc√™ fez manualmente.
Sugest√µes: Just-validate e popup-validation



Recursos Adicionais
Tutorial de como instalar e utilizar a biblioteca Just-validate
Tutorial de como instalar e utilizar a biblioteca popup-validation
