O que vamos aprender?
Construir p√°ginas responsivas √© uma habilidade fundamental para pessoas que trabalham com desenvolvimento front-end hoje em dia. Quando falamos sobre p√°ginas responsivas, o termo "mobile first" - layout voltado para dispositivos m√≥veis - vem √† cabe√ßa imediatamente.
Em teoria, √© mais f√°cil construir um layout "mobile first" quando voc√™ est√° come√ßando o desenvolvimento, pois voc√™ n√£o tem que se preocupar muito sobre funcionalidades complexas que podem entrar em telas grandes de desktop.
Voc√™ vai aprender como utilizar media queries para mostrar um layout diferente em tamanhos de tela diferentes.
Exemplo:
Layout 1 para telas grandes: desktops, laptops, etc;
Layout 2 para telas m√©dias: tablets, telefones com tela grande (Samsung Note), etc;
Layout 3 para telas pequenas: smartphones.
Media queries s√£o bastante utilizadas no design responsivo para mostrar diferentes layouts para diferentes telas, dependendo do seu tamanho e/ou orienta√ß√£o. A principal raz√£o para isso √© que alguns layouts podem parecer "estranhos" (ou at√© completamente quebrados) em telas muito estreitas, ou muito largas.




Voc√™ ser√° capaz de:
Criar regras CSS espec√≠ficas para serem aplicadas a dispositivos m√≥veis;
Construir p√°ginas que alteram o seu layout de acordo com a orienta√ß√£o da tela;



Por que isso √© importante?
Responsividade √© uma abordagem de design e desenvolvimento que se adapta ao comportamento e ambiente da pessoa usu√°ria baseado no tamanho, orienta√ß√£o e plataforma da sua tela. Em um cen√°rio onde os tamanhos das telas que usamos variam drasticamente, ela √© considerada uma habilidade indispens√°vel para qualquer novo projeto.
√â importante deixar claro que: design n√£o √© desenvolvimento e desenvolvimento n√£o √© design.
As duas frentes trabalham juntas para criar um produto final, mas a forma como elas trabalham n√£o necessariamente segue o mesmo padr√£o. √â comum escolher entre um caminho estritamente voltado para desktop ou para mobile durante tanto o design quanto o desenvolvimento, se isso for o melhor para o projeto.
Por√©m, podemos adotar uma abordagem flex√≠vel onde durante o design o foco √© no desktop, e durante o in√≠cio do desenvolvimento focar no mobile primeiro.
Pode parecer contraintuitivo, mas essa abordagem flex√≠vel √© mais comum do que voc√™ imagina. Quando acontece o design de uma p√°gina que vai atender pessoas usu√°rias tanto de desktop quanto de mobile, geralmente √© melhor fazer o design da vers√£o desktop primeiro (porque no pior caso, esse ser√° o √∫nico design da p√°gina). üòÜ
E ent√£o, quando chegar na fase de desenvolvimento, existem alguns benef√≠cios de voc√™ inverter essa l√≥gica e codar o CSS focado para o mobile primeiro:
O tempo de carregamento para dispositivos m√≥veis √© menor.
Pense em como o navegador interpreta o c√≥digo CSS: de cima pra baixo. ‚¨á ü§î
Isso significa que se voc√™ colocar o CSS para a vers√£o desktop primeiro, o navegador do mobile vai ter que interpretar todo esse CSS antes dele chegar no c√≥digo CSS feito para o mobile que √© o que ele precisa renderizar.
Se voc√™ colocar o CSS para mobile primeiro, o navegador da pessoa usu√°ria mobile vai renderizar logo o primeiro CSS que ele encontrar, resultando numa experi√™ncia mais r√°pida.
√â importante lembrar que pessoas usu√°rias de dispositivos mobile geralmente tem menos poder de processamento, menos banda de internet dispon√≠vel... ent√£o qualquer otimiza√ß√£o que reduza o tempo de carregamento para eles j√° √© um ganho! üèÖ
Geralmente, resulta em menos linhas de c√≥digo.
Quando voc√™ toma uma abordagem de pensar no mobile primeiro, o resultado geralmente s√£o menos linhas de CSS. Mas por qu√™?
Os elementos mostrados na vers√£o mobile tendem a ser blocos mais simples, o que significa que √© muito mais f√°cil escrever CSS para customizar essa vers√£o numa tela desktop mais complexa, do que pegar um c√≥digo complexo e cheio de detalhes feito para uma tela desktop e ter que simplific√°-lo para uma tela mobile. üß†
Faz muito mais sentido voc√™ come√ßar com elementos simples que voc√™ pode ir adicionando detalhes e comportamentos conforme a necessidade, do que come√ßar com elementos extensos e complexos que voc√™ possivelmente precisar√° de muito mais c√≥digo para redefin√≠-los.




Conte√∫dos
Essa √© a hora de voc√™ aprender como o CSS pode ser poderoso!



Parte I - Media Query
Para come√ßar mergulhando de cabe√ßa, vamos entender como utilizar media query
Obs: n√£o se preocupe em reproduzir o c√≥digo demonstrado no v√≠deo, faremos isso logo em seguida!




Parte I - Media Query
Para come√ßar mergulhando de cabe√ßa, vamos entender como utilizar media query
Obs: n√£o se preocupe em reproduzir o c√≥digo demonstrado no v√≠deo, faremos isso logo em seguida!




Parte II - M√£o na massa
Vamos praticar um pouco!
Copie os c√≥digos HTML e CSS abaixo, salve-os no mesmo diret√≥rio com os nomes index.html e style.css, respectivamente;
Copiar
<!DOCTYPE html>
<html lang="pt-br">
  <head>
  <meta charset="UTF-8">
  <title>Media Queries</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Cinzel&family=Raleway:wght@300;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <h1 id="mySpotrybefy">‚ú® Trybe Tricks ‚ú®</h1>
      <p>Vamos fazer algumas divs desaparecerem hoje?</p>
    </header>
    <main>
      <section class="cards">
        <div class="card">
          <h3>Primeira div</h3>
          <p>E ser√° a primeira participante de hoje!</p>
          <p>Essa div s√≥ poder√° aparecer se nossa tela possuir <strong>largura m√≠nima</strong> de 500px.</p>
        </div>
        <div class="card">
          <h3>Segunda div</h3>
          <p>U√©, mas ela deveria aparecer aqui?</p>
          <p>Pois √©! Mas essa div dever√° aparecer apenas se a largura <strong>estiver entre</strong> 600px e 1000px.</p>
        </div>
        <div class="card">
          <h3>Terceira div</h3>
          <p>Vamos para nosso Grand Finale!</p>
          <p>Para nosso grande truque, precisaremos que essa div <strong>n√£o apare√ßa</strong> entre 650px e 950px.</p>
        </div>
        <div class="dont-show">
          <p>Quem gostou, pediu bis!</p>
          <p>Sem alterar a classe '.trick', como fazer para o texto dela aparecer quando a tela estiver com menos de 500px de largura?</p>
        </div>
      </section>
    </main>
    <footer>
      <p>Trybe Tricks, criando pessoas desenvolvedoras que fazem m√°gica com as m√£os!</p>
    </footer>
    <p class="trick">Floreio! Como voc√™ conseguiu fazer aparecer mais essa caixa de texto?</p>
  </body>
</html>
Copiar
body {
  align-items: center;
  color: #525252;
  display: flex;
  flex-flow: column wrap;
  font-family: Raleway, sans-serif;
  justify-content: center;
  overflow: hidden;
  width: 100vw;
}

h1 {
  font-family: Cinzel, serif;
  font-size: 48px;
}

h3 {
  font-size: 25px;
  margin: 0;
}

p {
  font-size: 18px;
  font-weight: 300;
}

p.trick {
  color: white;
  font-size: 14px;
}

p strong {
  font-weight: 700;
}

.card p:nth-last-child(1) {
  align-self: flex-end;
  font-size: 14px;
}

.cards {
  display: flex;
  flex-flow: row wrap;
}

.card {
  border-radius: 5px;
  color: white;
  display: none;
  flex-flow: row wrap;
  height: 200px;
  margin: 20px;
  padding: 20px;
  width: 200px;
}

.card:nth-of-type(1) {
  background-color: #0fa36b;
}

.card:nth-of-type(2) {
  background-color: #0255c2;
}

.card:nth-of-type(3) {
  background-color: #41197f;
}
Para os seguintes exerc√≠cios voc√™ n√£o precisar√° alterar o arquivo HTML, apenas o CSS. üòâ
1 - A primeira div s√≥ poder√° aparecer se nossa tela possuir largura m√≠nima de 500px.
2 - A segunda div s√≥ poder√° aparecer apenas se a largura estiver entre 600px e 1000px.
3 - A terceira div n√£o dever√° aparecer se nossa tela possuir largura entre 650px e 950px.
4 - Sem alterar a classe trick, fa√ßa com que o texto dela apare√ßa somente quando a tela estiver com menos de 500px de largura.




Vamos praticar!
Esse tal de CSS √© realmente impressionante n√£o √©?! Com ele, podemos criar infinitos estilos para nossas p√°ginas. Ent√£o, vamos praticar?
Aula ao vivo! Vamos para o Slack onde o link estar√° dispon√≠vel.



Exerc√≠cios
Agora que voc√™ aprendeu como criar layouts espec√≠ficos para diferentes tamanhos de tela, vamos colocar as m√£os na massa! üíªüì≤
üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/6.5 (bloco 6, dia 5)
Copiar
$ git checkout -b exercicios/6.5
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-6-html-e-css-forms-flexbox-e-responsivo
$ cd bloco-6-html-e-css-forms-flexbox-e-responsivo
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-5-css-responsivo-mobile-first
$ cd dia-5-css-responsivo-mobile-first
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-6-html-e-css-forms-flexbox-e-responsivo/dia-5-css-responsivo-mobile-first. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/6.5
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/6.5)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/6.5 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/6.5
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/6.5, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº




üöÄ Parte I - Criar uma p√°gina para uma tela pequena
Antes de come√ßar, copie o template HTML e CSS abaixo, e salve em seus respectivos arquivos:
exercise1.html
Copiar
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Media Query Exercise 1</title>
  <link rel="stylesheet" href="exercise1.css" />
</head>
  <body>
    <header>
      <h1>Media Query Demo</h1>
    </header>
    <article>
      <p>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      </p>
      <p>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Corrupti, ipsum quae veritatis in nihil laudantium labore beatae nulla laborum rem. Error, molestiae eaque quod placeat at. Labore architecto minus accusantium.
      </p>
    </article>
    <main>
      <h2>Box Columns</h2>
      <section>
        <figure>
          <img src="http://placekitten.com/452/450?image=12" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=5" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=1" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=9" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=6" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=16" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
      </section>
    </main>
  </body>
</html>
exercise1.css
Copiar
/*
 * @see http://www.paulirish.com/2012/box-sizing-border-box-ftw/
 * apply a natural box layout model to all elements, but allowing components to change
 */
 html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {

}

article {

}

h1 {

}

h2 {

}

img {
	max-width: 100%;
}

main {

}

section {

}

figure {
	margin: 0;
}

figcaption {
  font-size: .8em;
}
Comece o exerc√≠cio analisando a p√°gina em uma tela de tamanho pequeno, para simular como ela pode parecer em um dispositivo m√≥vel (voc√™ pode usar o Chrome para isso, veja no detalhe nos Recursos adicionais).
Ao pensar no design de uma tela pequena primeiro, estamos aplicando a abordagem do mobile first. Fazendo isso, come√ßamos com um design b√°sico (m√≠nimo denominador comum) e ent√£o trabalhamos em melhorias mais sofisticadas para os navegadores com funcionalidades avan√ßadas e layouts espec√≠ficos.
Isso garante que estamos desenvolvendo uma experi√™ncia que funcionar√° para todos. Tamb√©m tem um efeito colateral, que isso tamb√©m nos ajuda a perceber qual o conte√∫do √© realmente importante na nossa p√°gina.
Dica: no Chrome voc√™ pode facilmente encontrar qual o tamanho da sua tela usando o "Inspecionar elemento". Abra-o e redimensione a janela, enquanto isso preste aten√ß√£o no topo da tela: as dimens√µes de largura e altura ir√£o aparecer conforme voc√™ redimensiona a tela.
Comece a expandir a largura da sua tela. Fa√ßa isso at√© chegar em um ponto onde o design atual da p√°gina n√£o funciona mais. Por exemplo, o comprimento das linhas pode come√ßar a ficar muito grande para que o texto seja facilmente lido, ou talvez a p√°gina fique com uma largura grande o suficiente que n√£o fa√ßa mais sentido as imagens serem mostradas uma abaixo da outra.
Agora voc√™ vai ajustar o CSS para melhorar a visualiza√ß√£o da p√°gina.
Realize as seguintes tarefas:
1 - Fa√ßa o tamanho da fonte ser maior;
2 - Fa√ßa o tamanho da fonte dos elementos h1 ser menor;
3 - Aumente o espa√ßamento entre as figuras;
4 - Adicione um pouco de margin na p√°gina.
5 - Guarde a largura da tela no ponto que voc√™ identificou que o layout atual n√£o funcionou bem (por exemplo 800px). Esse ser√° o primeiro breakpoint do layout. Um breakpoint √© apenas um ponto onde estamos definindo que o design atual deve mudar;
6 - Crie uma media query no seu arquivo CSS, usando a dimens√£o em pixels que voc√™ guardou como o min-width do teste da media query. Dentro desse breakpoint, adicione os seguintes ajustes:
Altere a cor de fundo (isso vai te ajudar a perceber quando a media query teve efeito);
Ajuste o tamanho da fonte;
Ajuste as margens da p√°gina;
Fa√ßa as imagens serem mostradas em duas colunas.
7 - Agora, voc√™ vai criar outro breakpoint para telas grandes. Redimensione sua tela de novo para encontrar um novo breakpoint.
8 - Crie uma nova media query no seu arquivo CSS usando a dimens√£o que voc√™ encontrou para telas grandes (por exemplo 1300px), e realize os seguintes ajustes dentro do breakpoint:
Altere a cor de fundo;
Ajuste o tamanho da fonte;
Ajuste as margens da p√°gina;
Adicione a propriedade max-width √† p√°gina, para garantir que a largura das linhas n√£o fique muito grande.




üöÄ Parte I - Criar uma p√°gina para uma tela pequena
Antes de come√ßar, copie o template HTML e CSS abaixo, e salve em seus respectivos arquivos:
exercise1.html
Copiar
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Media Query Exercise 1</title>
  <link rel="stylesheet" href="exercise1.css" />
</head>
  <body>
    <header>
      <h1>Media Query Demo</h1>
    </header>
    <article>
      <p>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      </p>
      <p>
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Corrupti, ipsum quae veritatis in nihil laudantium labore beatae nulla laborum rem. Error, molestiae eaque quod placeat at. Labore architecto minus accusantium.
      </p>
    </article>
    <main>
      <h2>Box Columns</h2>
      <section>
        <figure>
          <img src="http://placekitten.com/452/450?image=12" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=5" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=1" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=9" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=6" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
        <figure>
          <img src="http://placekitten.com/452/450?image=16" alt="Placeholder kitteh">
          <figcaption>Place Kittens are great</figcaption>
        </figure>
      </section>
    </main>
  </body>
</html>
exercise1.css
Copiar
/*
 * @see http://www.paulirish.com/2012/box-sizing-border-box-ftw/
 * apply a natural box layout model to all elements, but allowing components to change
 */
 html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {

}

article {

}

h1 {

}

h2 {

}

img {
	max-width: 100%;
}

main {

}

section {

}

figure {
	margin: 0;
}

figcaption {
  font-size: .8em;
}
Comece o exerc√≠cio analisando a p√°gina em uma tela de tamanho pequeno, para simular como ela pode parecer em um dispositivo m√≥vel (voc√™ pode usar o Chrome para isso, veja no detalhe nos Recursos adicionais).
Ao pensar no design de uma tela pequena primeiro, estamos aplicando a abordagem do mobile first. Fazendo isso, come√ßamos com um design b√°sico (m√≠nimo denominador comum) e ent√£o trabalhamos em melhorias mais sofisticadas para os navegadores com funcionalidades avan√ßadas e layouts espec√≠ficos.
Isso garante que estamos desenvolvendo uma experi√™ncia que funcionar√° para todos. Tamb√©m tem um efeito colateral, que isso tamb√©m nos ajuda a perceber qual o conte√∫do √© realmente importante na nossa p√°gina.
Dica: no Chrome voc√™ pode facilmente encontrar qual o tamanho da sua tela usando o "Inspecionar elemento". Abra-o e redimensione a janela, enquanto isso preste aten√ß√£o no topo da tela: as dimens√µes de largura e altura ir√£o aparecer conforme voc√™ redimensiona a tela.
Comece a expandir a largura da sua tela. Fa√ßa isso at√© chegar em um ponto onde o design atual da p√°gina n√£o funciona mais. Por exemplo, o comprimento das linhas pode come√ßar a ficar muito grande para que o texto seja facilmente lido, ou talvez a p√°gina fique com uma largura grande o suficiente que n√£o fa√ßa mais sentido as imagens serem mostradas uma abaixo da outra.
Agora voc√™ vai ajustar o CSS para melhorar a visualiza√ß√£o da p√°gina.
Realize as seguintes tarefas:
1 - Fa√ßa o tamanho da fonte ser maior;
2 - Fa√ßa o tamanho da fonte dos elementos h1 ser menor;
3 - Aumente o espa√ßamento entre as figuras;
4 - Adicione um pouco de margin na p√°gina.
5 - Guarde a largura da tela no ponto que voc√™ identificou que o layout atual n√£o funcionou bem (por exemplo 800px). Esse ser√° o primeiro breakpoint do layout. Um breakpoint √© apenas um ponto onde estamos definindo que o design atual deve mudar;
6 - Crie uma media query no seu arquivo CSS, usando a dimens√£o em pixels que voc√™ guardou como o min-width do teste da media query. Dentro desse breakpoint, adicione os seguintes ajustes:
Altere a cor de fundo (isso vai te ajudar a perceber quando a media query teve efeito);
Ajuste o tamanho da fonte;
Ajuste as margens da p√°gina;
Fa√ßa as imagens serem mostradas em duas colunas.
7 - Agora, voc√™ vai criar outro breakpoint para telas grandes. Redimensione sua tela de novo para encontrar um novo breakpoint.
8 - Crie uma nova media query no seu arquivo CSS usando a dimens√£o que voc√™ encontrou para telas grandes (por exemplo 1300px), e realize os seguintes ajustes dentro do breakpoint:
Altere a cor de fundo;
Ajuste o tamanho da fonte;
Ajuste as margens da p√°gina;
Adicione a propriedade max-width √† p√°gina, para garantir que a largura das linhas n√£o fique muito grande.




B√¥nus (opcional)
O v√≠deo abaixo mostra como voc√™ pode criar layouts responsivos utilizando o framework Bootstrap.
Use-o como refer√™ncia para realizar o exerc√≠cio b√¥nus proposto a seguir.

Agora que voc√™ j√° est√° fera em criar layouts espec√≠ficos para diferentes tamanhos de tela utilizando a abordagem mobile first, que tal voltar √† pagina que voc√™ criou na aula de HTML Sem√¢ntico sobre o camar√£o louva deus e criar um layout bem bacana para ela ser acessada a partir de telas menores? ü¶êü¶óü•ä
Sugest√£o:
Crie um layout espec√≠fico para telas pequenas (smartphones); üì±
Crie um layout espec√≠fico para telas m√©dias (tablets); üì±
Crie um layout espec√≠fico para impress√£o (impressoras, salvar como PDF, etc). üñ®
Dica: o Bootstrap n√£o tem uma classe espec√≠fica para o tipo de media print. Voc√™ deve definir a media query no seu arquivo CSS e estilizar conforme achar melhor! üòâ
