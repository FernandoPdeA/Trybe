O que vamos aprender?
Voc√™ vai aprender mais sobre CSS Flexbox.
Na aula anterior voc√™ aprendeu sobre as propriedades Flexbox que atuam no container. Agora √© hora de aprender sobre as propriedades que atuam nos items.




Voc√™ ser√° capaz de:
Utilizar CSS Flexbox para criar layouts flex√≠veis;
Utilizar CSS Flexbox para alterar o comportamento de items.



Por que isso √© importante?
Aprender sobre as propriedades Flexbox que agem nos items √© imprescind√≠vel, pois s√≥ dessa forma voc√™ ter√° o controle total sobre o layout de uma p√°gina.



Conte√∫dos
Os elementos presentes em um Flex container (assunto abordado na aula anterior) s√£o chamados de Flex items. O Flexbox possui propriedades que impactam diretamente nesses elementos, fazendo com que a pessoa desenvolvedora tenha um controle melhor em rela√ß√£o √† estrutura da p√°gina.
Agora vamos aprender sobre essas propriedades:



Propriedade: align-self
A propriedade align-self nos permite utilizar os mesmos valores de alinhamento aprendidos anteriormente (flex-start, flex-end, stretch, baseline, center), por√©m somente para um item. Assim, podemos criar uma nova classe, pseudo-classe ou id para um item e editar sua posi√ß√£o individualmente, fazendo com que ele, diferente dos demais, fique no in√≠cio ou ao final do container, centralizado, como preferir.
Para maiores detalhes, assista este v√≠deo (caso deseje, clique no √≠cone CC para obter legendas em ingl√™s - √© bom para praticar o idioma!).
Para fixar
Copie o c√≥digo abaixo e no seu editor de c√≥digo, teste as possibilidades para a propriedade align-self.
Copiar
<!DOCTYPE html>
<html lang="pt">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS FLEXBOX - ALIGN SELF</title>
    <style>
      .container {
        border: 1px solid black;
        display: flex;
        height: 300px;
        margin: auto;
        width: 500px;
      }

      .keep {
        align-self: center;
        background-color: #FAA488;
        display: flex;
        justify-content: center;
        width: 150px;
        list-style: none;
      }

      .change {
        /* Altere a propriedade align-self. */
        align-self: center;
        background-color: #FBD26A;
        display: flex;
        justify-content: center;
        width: 200px;
        list-style: none;
      }

    </style>
  </head>
  <body>
    <ul class="container">
      <li class="keep">REFER√äNCIA</li>
      <li class="change">ELEMENTO TESTE</li>
      <li class="keep">REFER√äNCIA</li>
    </ul>
  </body>
</html>




Propriedade: order
A propriedade order nos permite ordenar itens de um determinado container. Esta propriedade √© particular de cada item e, quando utilizada, far√° com que o flexbox os exiba em ordem crescente.
Por padr√£o, a propriedade order, implicitamente, possui o valor 0, isso significa que, se apenas um item dentre 5 em um container recebe a propriedade order: 1, todos os outros ficar√£o ordenados da forma que foram constru√≠dos no HTML, enquanto este ser√° posicionado ap√≥s os demais.
√â interessante chamar a aten√ß√£o para o fato de que a propriedade aceita valores negativos. Assim, continuando o exemplo acima, caso o item diferent√£o receba order: -1, ele ser√° exibido antes dos demais (porque, como dito acima, order sempre tratar√° os itens em ordem crescente).
Assista o v√≠deo a seguir para ver essa ordena√ß√£o na pr√°tica:

Para fixar
Copie o c√≥digo abaixo e teste as possibilidades de ordena√ß√£o.
Copiar
<!DOCTYPE html>
<html lang="pt">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS FLEXBOX - ORDER</title>
    <style>
      .container {
        border: 1px solid black;
        display: flex;
        height: 50px;
        margin: auto;
        width: 500px;
      }

      .box {
        align-items: center;
        display: flex;
        justify-content: center;
        width: 125px;
      }

      .one {
        background-color: #FBD26A;
        display: flex;
        /* Altere a propriedade order. */
        order: 1;
        list-style: none;
      }

      .two {
        background-color: #FAA488;
        display: flex;
        /* Altere a propriedade order. */
        order: 2;
        list-style: none;
      }

      .three {
        background-color: #9069EF;
        display: flex;
        /* Altere a propriedade order. */
        order: 3;
        list-style: none;
      }

      .four {
        background-color: #006472;
        display: flex;
        /* Altere a propriedade order. */
        order: 4;
        list-style: none;
      }

    </style>
  </head>
  <body>
    <ul class="container">
      <li class="box one">1</li>
      <li class="box two">2</li>
      <li class="box three">3</li>
      <li class="box four">4</li>
    </ul>
  </body>
</html>




Propriedade: order
A propriedade order nos permite ordenar itens de um determinado container. Esta propriedade √© particular de cada item e, quando utilizada, far√° com que o flexbox os exiba em ordem crescente.
Por padr√£o, a propriedade order, implicitamente, possui o valor 0, isso significa que, se apenas um item dentre 5 em um container recebe a propriedade order: 1, todos os outros ficar√£o ordenados da forma que foram constru√≠dos no HTML, enquanto este ser√° posicionado ap√≥s os demais.
√â interessante chamar a aten√ß√£o para o fato de que a propriedade aceita valores negativos. Assim, continuando o exemplo acima, caso o item diferent√£o receba order: -1, ele ser√° exibido antes dos demais (porque, como dito acima, order sempre tratar√° os itens em ordem crescente).
Assista o v√≠deo a seguir para ver essa ordena√ß√£o na pr√°tica:

Para fixar
Copie o c√≥digo abaixo e teste as possibilidades de ordena√ß√£o.
Copiar
<!DOCTYPE html>
<html lang="pt">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS FLEXBOX - ORDER</title>
    <style>
      .container {
        border: 1px solid black;
        display: flex;
        height: 50px;
        margin: auto;
        width: 500px;
      }

      .box {
        align-items: center;
        display: flex;
        justify-content: center;
        width: 125px;
      }

      .one {
        background-color: #FBD26A;
        display: flex;
        /* Altere a propriedade order. */
        order: 1;
        list-style: none;
      }

      .two {
        background-color: #FAA488;
        display: flex;
        /* Altere a propriedade order. */
        order: 2;
        list-style: none;
      }

      .three {
        background-color: #9069EF;
        display: flex;
        /* Altere a propriedade order. */
        order: 3;
        list-style: none;
      }

      .four {
        background-color: #006472;
        display: flex;
        /* Altere a propriedade order. */
        order: 4;
        list-style: none;
      }

    </style>
  </head>
  <body>
    <ul class="container">
      <li class="box one">1</li>
      <li class="box two">2</li>
      <li class="box three">3</li>
      <li class="box four">4</li>
    </ul>
  </body>
</html>




Subcontainers, subitens e margin
Depois de aprender sobre as propriedades relativas aos flex items, vamos entender um pouco mais sobre margins, al√©m de aprender que √© poss√≠vel criar containers dentro de containers, para fazer agrupamento e para facilitar a organiza√ß√£o da p√°gina.




Vamos praticar!
Agora que voc√™ j√° estudou sobre Flexbox e as propriedades que afetam um item, vamos para a aula ao vivo.
O link estar√° dispon√≠vel no Slack.



Exerc√≠cios
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/6.4 (bloco 6, dia 4)
Copiar
$ git checkout -b exercicios/6.4
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-6-html-e-css-forms-flexbox-e-responsivo
$ cd bloco-6-html-e-css-forms-flexbox-e-responsivo
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-4-css-flexbox-parte-2
$ cd dia-4-css-flexbox-parte-2
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-6-html-e-css-forms-flexbox-e-responsivo/dia-4-css-flexbox-parte-2. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/6.4
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/6.4)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/6.4 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/6.4
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/6.4, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº




Exerc√≠cios
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/6.4 (bloco 6, dia 4)
Copiar
$ git checkout -b exercicios/6.4
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-6-html-e-css-forms-flexbox-e-responsivo
$ cd bloco-6-html-e-css-forms-flexbox-e-responsivo
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-4-css-flexbox-parte-2
$ cd dia-4-css-flexbox-parte-2
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-6-html-e-css-forms-flexbox-e-responsivo/dia-4-css-flexbox-parte-2. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/6.4
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/6.4)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/6.4 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/6.4
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/6.4, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº




Bonus
Que bom que voc√™ chegou at√© aqui, e para treinar ainda mais as propriedades estudadas de Flexbox reunimos alguns exerc√≠cios gameficados que s√£o super divertidos.üöÄ
Flexbox Web Flow
Flexbox Froggy - exerc√≠cios de 14 a 24
Flexbox Defense - exerc√≠cios de 10 a 12


Recursos adicionais (opcional)
Flexbox Guia Completo
A Complete Guide to Flexbox
MDN Flexbox
CSS Flexbox cheatsheet
CSS Flexbox Can I use?
CSS Flexbox Autoprefixer
Playground: Properties for the flex container
