O que vamos aprender?
Nessa aula sobre JavaScript, voc√™ aprender√° a adicionar e remover tags de uma p√°gina.
Al√©m disso, aprender√° mais uma forma de buscar os elementos da p√°gina.


Voc√™ ser√° capaz de:
Adicionar e remover elementos HTML da p√°gina via JavaScript;
Buscar os elementos da p√°gina com a propriedade parentNode.



Conte√∫dos
A seguir, voc√™ ir√° aprender como buscar, criar e remover elementos utilizando JavaScrip



Parte I - Buscando elementos
Primeiramente, assista a este v√≠deo:

Entendeu? A propriedade parentNode acessa o elemento pai do elemento sobre o qual a propriedade √© chamada. Mas ela n√£o √© a √∫nica forma de, a partir de um elemento, navegar para outros.
H√°, ao todo, as seguintes propriedades:
parentNode: retorna o n√≥ pai.
parentElement: retorna o elemento pai.
childNodes: retorna um NodeList com todos os n√≥s filhos.
children: retorna um HTMLCollection com todos os elementos filhos.
firstChild: retorna o primeiro n√≥ filho.
firstElementChild: retorna o primeiro elemento filho.
lastChild: retorna o √∫ltimo n√≥ filho.
lastElementChild: retorna o √∫ltimo elemento filho.
nextSibling: retorna o pr√≥ximo n√≥.
nextElementSibling: retorna o pr√≥ximo elemento.
previousSibling: retorna o n√≥ anterior.
previousElementSibling: retorna o elemento anterior.
√â importante dizer que, √† primeira vista, as propriedades nextSibling e nextElementSibling parecem fazer a mesma coisa, mas uma pega o pr√≥ximo n√≥ do DOM, enquanto a outra pega o pr√≥ximo elemento, e nem sempre o pr√≥ximo n√≥ √© um elemento.
Para voc√™ entender melhor, observe com aten√ß√£o a estrutura HTML que temos abaixo:
Copiar
<!-- arquivo index.html -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <main>
    <div id="start"></div>
    n√≥
    <p>elemento</p>
  </main>
  <script src="script.js"></script>
</body>
</html>
Como voc√™ pode ver, o arquivo possui um elemento main contendo dois elementos filhos: uma <div> e um <p>. Ent√£o, voc√™ vai aplicar as propriedades nextSibling e nextElementSibling para ver a diferen√ßa entre elas:
Copiar
// arquivo script.js

console.log(document.getElementById('start').nextSibling) // n√≥

console.log(document.getElementById('start').nextElementSibling) // <p>elemento</p>
Observa√ß√£o: para testar o c√≥digo acima, crie um arquivo index.html e outro script.js, copie os c√≥digos e salve os documentos. Para visualizar as sa√≠das no console, d√™ start no Live Server, inspecione a p√°gina e abra o console.
Primeiro, foi selecionado o elemento div utilizando o seu id, 'start'. Na sequ√™ncia, aplicadas as propriedades nextSibling e nextElementSibling. Voc√™ pode ver que, nextSibling retornar√° o texto "n√≥" que representa o pr√≥ximo n√≥ do DOM a partir da div, enquanto que, nextElementSibling retornar√° o pr√≥ximo elemento propriamente, ou seja, o elemento <p>.
üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ
üöÄ Entendeu? Ent√£o vamos praticar! Adicione o c√≥digo abaixo a uma p√°gina HTML e adicione uma tag script. Voc√™ dever√° fazer tudo a seguir usando somente JavaScript.
Copiar
<main id="paiDoPai">
  <section id="pai">
    <section id="primeiroFilho"></section>
    <section id="elementoOndeVoceEsta">
      <section id="primeiroFilhoDoFilho"></section>
      <section id="segundoEUltimoFilhoDoFilho"></section>
    </section>
    Aten√ß√£o!
    <section id="terceiroFilho"></section>
    <section id="quartoEUltimoFilho"></section>
  </section>
</main>
Acesse o elemento elementoOndeVoceEsta.
Acesse pai a partir de elementoOndeVoceEsta e adicione uma color a ele.
Acesse o primeiroFilhoDoFilho e adicione um texto a ele. Voc√™ se lembra dos v√≠deos da aula anterior, como fazer isso?
Acesse o primeiroFilho a partir de pai.
Agora acesse o primeiroFilho a partir de elementoOndeVoceEsta.
Agora acesse o texto Aten√ß√£o! a partir de elementoOndeVoceEsta.
Agora acesse o terceiroFilho a partir de elementoOndeVoceEsta.
Agora acesse o terceiroFilho a partir de pai.



Parte II - Criando elementos
Neste v√≠deo a seguir, voc√™ vai aprender como criar elementos HTML usando o JavaScript e como adicion√°-los ao documento.

üöÄ E a pr√°tica? Aqui!
Crie um irm√£o para elementoOndeVoceEsta.
Crie um filho para elementoOndeVoceEsta.
Crie um filho para primeiroFilhoDoFilho.
A partir desse filho criado, acesse terceiroFilho.



Parte III - Removendo elementos
Veja como utilizar o JavaScript para remover elementos HTML da p√°gina.

Para praticar:
Remova todos os elementos filhos de paiDoPai exceto pai, elementoOndeVoceEsta e primeiroFilhoDoFilho.



Vamos praticar!
Chegou a hora de criarmos e removermos elementos!
Aula ao vivo! Vamos para o Slack, onde o link estar√° dispon√≠vel.


Exerc√≠cios
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/5.2 (bloco 5, dia 2)
Copiar
$ git checkout -b exercicios/5.2
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-5-javascript-dom-eventos-e-web-storage
$ cd bloco-5-javascript-dom-eventos-e-web-storage
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-2-javascript-trabalhando-com-elementos
$ cd dia-2-javascript-trabalhando-com-elementos
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-5-javascript-dom-eventos-e-web-storage/dia-2-javascript-trabalhando-com-elementos. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/5.2
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/5.2)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/5.2 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/5.2
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/5.2, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº




üöÄ Aprofunde seu conhecimento
Antes de come√ßar, crie um arquivo HTML na pasta exercises/5_2 e copie o c√≥digo abaixo:
Copiar
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Exerc√≠cio 5.2</title>
    <style>
      section {
        border-color: black;
        border-style: solid;
      }

      .title {
        text-align: center;
      }

      .main-content {
        background-color: yellow;
      }

      .main-content .center-content {
        background-color: red;
        width: 50%;
        margin-left: auto;
        margin-right: auto;
      }

      .main-content .center-content p {
        font-style: italic;
      }

      .main-content .left-content {
        background-color: green;
        width: 60%;
        margin-left: 0;
        margin-right: auto;
      }

      .main-content .left-content .small-image {
        display: block;
        margin-left: auto;
        margin-right: auto;
        border-radius: 100%;
      }

      .main-content .right-content {
        background-color: blue;
        width: 60%;
        margin-left: auto;
        margin-right: 0;
      }

      .main-content .description {
        text-align: center;
      }
    </style>
  </head>
  <body>
    <script>
      // COLOQUE SEU C√ìDIGO AQUI
    </script>
  </body>
</html>
O objetivo desses exerc√≠cios √© colocar em pr√°tica o que voc√™ acabou de aprender sobre DOM. Por isso, voc√™ deve fazer os exerc√≠cios utilizando apenas c√≥digo JavaScript, o qual deve ser inserido entre as tags <script> e </script>.
Para uma melhor organiza√ß√£o, fa√ßa commits a cada tarefa conclu√≠da. Vamos aos exerc√≠cios:
üöÄ Adicione a tag h1 com o texto Exerc√≠cio 5.2 - JavaScript DOM como filho da tag body;
üöÄ Adicione a tag main com a classe main-content como filho da tag body;
üöÄ Adicione a tag section com a classe center-content como filho da tag main criada no passo 2;
üöÄ Adicione a tag p como filho do section criado no passo 3 e coloque algum texto;
üöÄ Adicione a tag section com a classe left-content como filho da tag main criada no passo 2;
üöÄ Adicione a tag section com a classe right-content como filho da tag main criada no passo 2;
üöÄ Adicione uma imagem com src configurado para o valor https://picsum.photos/200 e classe small-image. Esse elemento deve ser filho do section criado no passo 5;
üöÄ Adicione uma lista n√£o ordenada com os valores de 1 a 10 por extenso, ou seja, um, dois, tr√™s, ... como valores da lista. Essa lista deve ser filha do section criado no passo 6;
üöÄ Adicione 3 tags h3, todas sendo filhas do main criado no passo 2.
Agora que voc√™ criou muita coisa, vamos fazer algumas altera√ß√µes e remo√ß√µes:
üöÄ Adicione a classe title na tag h1 criada;
üöÄ Adicione a classe description nas 3 tags h3 criadas;
üöÄ Remova a section criado no passo 5 (aquele que possui a classe left-content). Utilize a fun√ß√£o .removeChild();
üöÄ Centralize a section criado no passo 6 (aquele que possui a classe right-content). Dica: para centralizar, basta configurar o margin-right: auto da section;
üöÄ Troque a cor de fundo do elemento pai da section criada no passo 3 (aquela que possui a classe center-content) para a cor verde;
üöÄ Remova os dois √∫ltimos elementos (nove e dez) da lista criada no passo 8.



Recursos adicionais (opcional)
W3Schools - JavaScript HTML DOM Navigation
https://www.w3schools.com/js/js_htmldom_navigation.asp
