O que vamos aprender?
Hoje, voc√™ vai aprender sobre o famoso DOM, a estrutura que faz a ponte entre o HTML e o JavaScript e que permite intera√ß√£o entre os dois. Por fim, voc√™ vai aprender um pouco sobre algumas das intera√ß√µes poss√≠veis: veremos como recuperar dados do HTML atrav√©s do JavaScript.


Voc√™ ser√° capaz de:
Acessar dados do HTML com o JavaScript atrav√©s dos seletores do DOM.


Conte√∫dos
A seguir, voc√™ vai aprender sobre DOM e seletores de elementos.


Parte I - O DOM. Ou: como o HTML e o JavaScript se comunicam?
O DOM (Document Object Model) √© uma interface que representa como os HTML e XML s√£o lidos pelo browser. Ap√≥s a leitura do documento HTML pelo browser, o DOM cria um objeto que faz uma representa√ß√£o do documento e define meios de como essa estrutura pode ser acessada, dessa forma podemos utilizar o JavaScript para manipular o DOM e assim alterar o estilo e o conte√∫do de nossa p√°gina.
No DOM nossa p√°gina √© representada por n√≥s e objetos, e √© atrav√©s deles que iremos realizar a comunica√ß√£o do nosso HTML com o JavaScript. Sendo assim, podemos dizer que o DOM √© uma representa√ß√£o orientada a objetos da p√°gina da web, que pode ser modificada com uma linguagem de script como JavaScript.

Estrutura DOM
Nessa imagem temos um exemplo de estrutura do DOM, ou melhor, da √°rvore do DOM, suas marca√ß√µes e como ela √© montada pelo browser. Vejamos um pouco mais sobre os objetos que a imagem apresenta:
Window: Representa uma janela que cont√©m um elemento DOM, sendo poss√≠vel acessar o documento que a janela cont√©m atrav√©s de Window;
location: Representa a localiza√ß√£o do objeto a qual ele est√° associado, isso √©, o documento atual;
document: Representa qualquer p√°gina da web carregada no navegador e serve como um ponto de entrada para o conte√∫do na p√°gina da web, sendo assim o document cont√©m todos os documentos HTML;
history: Permite a manipula√ß√£o do hist√≥rico da sess√£o do navegador, ou seja, as p√°ginas visitadas na guia ou quadro em que a p√°gina atual est√° carregada;
element: √â a classe base mais geral da qual todos os objetos em um Document herdam, isso √©, s√£o todas as tags que est√£o em arquivos HTML e se transformam em elementos da √°rvore DOM;
text: Texto que vai entre os elementos, √© todo o conte√∫do das tags;
atribute: S√£o todos os atributos que um n√≥ espec√≠fico possui, como uma class ou id.
Ficou n√≠tido? Ou a ideia do que √© o DOM ainda est√° um pouco abstrata?
Pense assim: a p√°gina HTML/CSS/JS que voc√™ faz √© um programa. O navegador √© quem interpreta esse c√≥digo e, a partir dele, gera a p√°gina que voc√™ v√™ na Internet.
Pois bem, o DOM √© uma estrutura da sua p√°gina que o navegador monta quando l√™. O seu intuito √© justamente permitir ao programa acessar os elementos da p√°gina usando c√≥digo e dar a ele o poder de manipul√°-las.
Se, ainda assim, o conceito de DOM estiver um pouco abstrato, n√£o se preocupe! Tudo vai ficar mais n√≠tido quando voc√™ come√ßar a interagir com ele.



Parte II - Seletores de elementos
Vamos a um exemplo! Suponha que voc√™ quer acessar a informa√ß√£o que est√° dentro da <div> de um site. Voc√™ pode estar baixando informa√ß√µes de sua p√°gina para alimentar uma base de dados, por exemplo.
Utilizando JavaScript, voc√™ pode, com c√≥digo, recuperar exatamente o texto que est√° dentro da <div> que voc√™ quiser.
Para entender como voc√™ pode fazer isso, vamos entender a fun√ß√£o getElementById.

Curtiu? E observe bem: ap√≥s recuperar o elemento que escolheu via JavaScript, voc√™ pode alter√°-lo! Para come√ßar a praticar, copie para um arquivo em sua m√°quina o exemplo abaixo.
Copiar
<!DOCTYPE html>
<html>
  <body>
    <header>
      <h2 id="page-title">T√≠tulo</h2>
      <p id="paragraph">D√™ uma cor para este par√°grafo!</p>
      <h4 id="subtitle">Subt√≠tulo</h4>
      <p id="second-paragraph">Segundo par√°grafo!</p>
    </header>
    <script>
      const paragraph = document.getElementById("paragraph");
      paragraph.style.color = "red";
    </script>
  </body>
</html>
Agora voc√™! Fa√ßa o seguinte:
Recupere o elemento que cont√©m o t√≠tulo da p√°gina e fa√ßa algo com ele, como alter√°-lo para o nome do seu filme favorito.
Agora recupere o segundo par√°grafo e use sua criatividade para alter√°-lo.
Por fim, recupere o subt√≠tulo e altere-o tamb√©m.
H√° mais formas de voc√™ acessar o conte√∫do dos elementos do seu HTML. A√≠ v√£o algumas outras!
Voc√™ pode acessar os elementos filtrando pelo nome da classe:

... E pelo nome da tag!

Utilizando o mesmo template de exerc√≠cio anterior:
Adicione uma classe igual para os dois par√°grafos.
Recupere os seus par√°grafos via c√≥digo JavaScript, usando a fun√ß√£o getElementsByClassName;
Altere algum estilo do primeiro deles.
Recupere o subt√≠tulo e altere a cor dele usando a fun√ß√£o getElementsByTagName.
Por fim, h√° uma fun√ß√£o √∫nica que voc√™ pode usar para fazer todos esses acessos, a querySelector.

Mas como fazer uma busca que retorna v√°rios elementos e n√£o apenas o primeiro? Bem, para isso existe o querySelectorAll, que tem comportamento semelhante ao querySelector. A diferen√ßa √© simples: ela retorna uma array com todos os elementos que "casem" com a sua sele√ß√£o, ao inv√©s de retornar apenas o primeiro deles. Veja o v√≠deo a seguir para entender melhor essa fun√ß√£o.

Tanto o querySelector quanto o querySelectorAll acessam CSS Selectors de todos os tipos. Ou seja, eles podem acessar muito al√©m de valores de ids e classes. Para saber mais sobre CSS Selectors, clique aqui.



Parte III - Qual seletor usar?
O getElementById(id) funciona de maneira diferente do querySelector('#id'), mas o resultado √© o mesmo. Como dito no v√≠deo, o primeiro tem uma performance melhor, mas o segundo √© mais flex√≠vel.
‚ö†Ô∏è Aten√ß√£o! ‚ö†Ô∏è
Enquanto os getElementsByClassName('ClassName') e getElementsByTagName('TagName') retornam uma HTMLCollection, os querySelectorAll('.ClassName') e querySelectorAll('TagName') retornam uma NodeList.
Leia sobre a diferen√ßa entre HTMLCollection e NodeList aqui.
Um outro ponto √© a forma da resposta, que pode ser diferente entre os seletores (HTMLCollection e NodeList). A forma de buscar os dados armazenados nessas estruturas, em alguns casos, pode mudar, ent√£o tenha cuidado na hora de fazer fun√ß√µes que utilizem o resultado dos seletores, isso pode salvar das dores de cabe√ßa sobre o porqu√™ de uma fun√ß√£o aparentemente correta n√£o funcionar.
Para praticar, substitua todas as fun√ß√µes que voc√™ usou no exerc√≠cio anterior por querySelector e/ou querySelectorAll.
Al√©m disso, vamos consolidar a manipula√ß√£o dos elementos HTML, colocando a cor do Administrador de Tempo da Trybe como na imagem abaixo usando apenas o JavaScript!

Administrador de tempo finalizado.
Voc√™ vai precisar usar o que aprendeu sobre getElementBy e querySelector para colocar em pr√°tica.
Antes de iniciar, crie um arquivo HTML na pasta exercises/5_1 e copie o c√≥digo abaixo:
Copiar
<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Administrador do Tempo</title>
  </head>
  <body id="container">
    <header id="header-container">
      <h1>Administrador do Tempo da Trybe</h1>
    </header>

    <section class="emergency-tasks">
      <div>
        <h3>Urgente e Importante</h3>
      </div>
      <div>
        <h3>Urgente e N√£o-Importante</h3>
      </div>
    </section>

    <section class="no-emergency-tasks">
      <div>
        <h3>N√£o-Urgente e Importante</h3>
      </div>
      <div>
        <h3>N√£o-Urgente e N√£o-Importante</h3>
      </div>
    </section>

    <footer id="footer-container">
      <div>&copy; Trybe</div>
    </footer>
    <script src="script.js"></script>
  </body>
</html>
Perceba que agora, na tag script, temos o atributo src. Ele servir√° para importarmos arquivos .js externos, e funciona de forma semelhante √† importa√ß√£o de arquivos CSS. Assim, mantemos nosso c√≥digo HTML mais limpo, e podemos editar com mais facilidade nosso JavaScript. Legal, n√£o √©?
Crie um arquivo JavaScript com o nome de "script.js" na pasta exercises/5_1 e coloque seus conhecimentos de getElementBy e querySelector em pr√°tica.
Crie tamb√©m um arquivo CSS e copie o c√≥digo abaixo para adicionar estilo √† p√°gina. Fique a vontade para soltar a criatividade e alterar o arquivo como desejar!
Copiar
* {
  margin: 0;
}

#container {
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  text-align: center;
}

#header-container {
  color: white;
  padding: 20px;
}

.emergency-tasks {
  display: inline-block;
  height: 400px;
  margin: 56px 0;
  width: 400px;
}

.emergency-tasks div {
  height: 198px;
}
.emergency-tasks h3 {
  color: white;
  margin-top: 10px;
  padding: 10px;
}

.no-emergency-tasks {
  display: inline-block;
  height: 400px;
  width: 400px;
}

.no-emergency-tasks div {
  height: 198px;
}

.no-emergency-tasks h3 {
  color: white;
  margin-top: 10px;
  padding: 10px;
}

#footer-container {
  color: white;
  font-weight: 700;
  padding: 15px;
  text-align: center;
}
Perceba que todo o conte√∫do da p√°gina est√° na cor branca, utilize o que aprendeu no conte√∫do de hoje para que a p√°gina fique igual ao Administrador do Tempo da Trybe.



Vamos praticar!
Partiu praticar esses conceitos em conjunto?!
Aula ao vivo! Vamos para o Slack, onde o link estar√° dispon√≠vel.



Exerc√≠cios
Agora vamos exercitar a utiliza√ß√£o de fun√ß√µes e o b√°sico do DOM. Voc√™ ver√° que alguns assuntos, como l√≥gica condicional e loops, entre outros, v√£o reaparecer frequentemente nos nossos exerc√≠cios.
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/5.1 (bloco 5, dia 1)
Copiar
$ git checkout -b exercicios/5.1
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-5-javascript-dom-eventos-e-web-storage
$ cd bloco-5-javascript-dom-eventos-e-web-storage
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-1-javascript-dom-e-seletores
$ cd dia-1-javascript-dom-e-seletores
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-5-javascript-dom-eventos-e-web-storage/dia-1-javascript-dom-e-seletores. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/5.1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/5.1)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/5.1 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/5.1
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/5.1, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº



Fun√ß√µes de manipula√ß√£o do DOM
√â hora de aplicar seus conhecimentos em manipular os elementos do HTML!
A seguir, voc√™ ver√° um trecho de c√≥digo HTML e CSS.
Crie um arquivo HTML dentro do diret√≥rio exercises/javascript-dom-eventos-e-web-storage_1 e copie o c√≥digo a seguir.
Leia as instru√ß√µes que est√£o dentro de um coment√°rio na tag <script>.
N√£o se esque√ßa de fazer um commit a cada exerc√≠cio!
Copiar
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Exerc√≠cio 5.1</title>
    
    <style>
      main, section {
        border-color: black;
        border-style: solid;
      }

      .title {
        text-align: center;
      }

      .main-content {
        background-color: yellow;
      }

      .main-content .center-content {
        background-color: red;
        width: 50%;
        margin: 0 auto;
      }

      .main-content .center-content p {
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <header> 
      <h1 class="title">Exerc√≠cio 5.1 - JavaEscripito </h1>
    </header>    
    <main class="main-content">
      <section class="center-content">
        <p>Texto padr√£o do nosso site</p>
        <p>-----</p>
        <p>Trybe</p>
      </section>
    </main>
    <script>
        /*
        Aqui voc√™ vai modificar os elementos j√° existentes utilizando apenas as fun√ß√µes:
        - document.getElementById()
        - document.getElementsByClassName()
        - document.getElementsByTagName()
        1. Crie e execute uma fun√ß√£o que mude o texto na tag `<p>-----</p>`, para uma descri√ß√£o de como voc√™ se v√™ daqui a 2 anos. (N√£o gaste tempo pensando no texto e sim realizando o exerc√≠cio)
        2. Crie e execute uma fun√ß√£o que mude a cor do quadrado amarelo para o verde da Trybe (rgb(76,164,109)).
        3. Crie e execute uma fun√ß√£o que mude a cor do quadrado vermelho para branco.
        4. Crie e execute uma fun√ß√£o que corrija o texto da tag <h1>.
        5. Crie e execute uma fun√ß√£o que modifique todo o texto da tag <p> para mai√∫sculo.
        6. Crie e execute uma fun√ß√£o que exiba o conte√∫do de todas as tags <p> no console.
        */
    </script>
  </body>
</html>



Recursos adicionais (opcional)
Mal pode esperar pra estudar mais JavaScript? Aqui temos o sum√°rio do guia definitivo de JS pra voc√™ saber mais sobre a linguagem.
Artigo - Trabalhando com DOM em JavaScript
Mais exerc√≠cios de DOM (mais avan√ßados)
Playground do Codepen para praticar


