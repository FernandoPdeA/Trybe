O que vamos aprender?
Nesta segunda parte sobre JavaScript, voc√™ aprender√° duas das principais estruturas de dados dispon√≠veis na linguagem e algumas das formas de iterar sobre elas.
Vamos avan√ßar nossos conhecimentos e entender mais sobre Array e For.



Voc√™ ser√° capaz de:
Manipular arrays (listas);
Utilizar o comando for;



Por que isso √© importante?
A manipula√ß√£o de Arrays estar√° presente em toda sua carreira como pessoa desenvolvedora. Voc√™ ir√° usar arrays frequentemente para armazenar os dados que achar necess√°rio.
Concentre-se em entender ao m√°ximo o conceito de Array e como manipul√°-los, pois essa base ser√° importante para avan√ßar seu conhecimento.



Conte√∫dos
Cada t√≥pico do conte√∫do apresentar√° o material de estudo e exerc√≠cios para fixar o aprendizado. Fa√ßa todo o conte√∫do com calma e treine bem com os exerc√≠cios.



Arrays (listas)
Veja o v√≠deo abaixo para aprender sobre Arrays em JavaScript.

Como vimos no v√≠deo acima, uma das grandes vantagens dos arrays √© o armazenamento de v√°rias informa√ß√µes em uma mesma estrutura. Veja o exemplo e pratique:
Copiar
let tasksList = ['Tomar caf√©', 'Reuni√£o', 'Brincar com o cachorro'];

console.log(tasksList.length);
// 3
Sempre que precisar armazenar v√°rias informa√ß√µes, o Array √© uma boa alternativa e ser√° uma ferramenta muito √∫til. Observamos que por meio do .length, conseguimos ter acesso √† quantidade de elementos contidos nele. Agora, como podemos acessar essas informa√ß√µes? Veja este exemplo:
Copiar
let tasksList = ['Tomar caf√©', 'Reuni√£o', 'Brincar com o cachorro'];

let searchForFirstTask = tasksList[0];
console.log(searchForFirstTask);
// Tomar caf√©

let searchForLastTask = tasksList[tasksList.length - 1];
console.log(searchForLastTask);
// Brincar com o cachorro
Como podemos observar, √© poss√≠vel acessar os arrays pelo seu √≠ndice. O fato curioso √© que a primeira posi√ß√£o do array √© representada pelo n√∫mero 0. Desse modo, para acessarmos o √∫ltimo elemento da estrutura, devemos pegar a quantidade de seus elementos utilizando o .length e subtrair 1.
Vamos agora adicionar uma nova atividade para nossa lista de arrays. Veja e pratique com o exemplo a seguir:
Copiar
let tasksList = ['Tomar caf√©', 'Reuni√£o', 'Brincar com o cachorro'];

tasksList.push('Fazer exerc√≠cios da Trybe');  // adiciona mais uma tarefa
console.log(tasksList);

// ['Tomar caf√©', 'Reuni√£o', 'Brincar com o cachorro', 'Fazer exerc√≠cios da Trybe']
Legal, n√©!? Repare que o m√©todo .push() adiciona um novo item no final do array. Se precisarmos adicionar no in√≠cio, podemos usar o .unshift(). Teste em seu console e veja o resultado.
Bacana, j√° aprendemos a estruturar nosso array, acessar algumas informa√ß√µes e adicionar itens. Espero que esteja animado e se perguntando: "Ok. Agora como fa√ßo para remover?". Simples, veja este exemplo:
Copiar
let tasksList = ['Tomar caf√©', 'Reuni√£o', 'Brincar com o cachorro'];

tasksList.pop();  // remove a √∫ltima tarefa
console.log(tasksList);

// [ 'Tomar caf√©', 'Reuni√£o' ]
O m√©todo .pop() nos permite remover o √∫ltimo item do array. Agora, se precisarmos remover o primeiro item da lista, podemos usar o .shift(). Fa√ßa em seu console e veja o resultado.
Outra importante ferramenta √© o indexOf(), usado para procurar o √≠ndice de um item no Array. Veja o exemplo:
Copiar
let tasksList = ['Tomar caf√©', 'Reuni√£o', 'Brincar com o cachorro'];

let indexOfTask = tasksList.indexOf('Reuni√£o');
console.log(indexOfTask);

// 1
Essas s√£o algumas das possibilidades mais utilizadas para manipular arrays. Caso tenha d√∫vidas, lembre-se sempre de consultar a documenta√ß√£o.
Para fixar fa√ßa os pr√≥ximos exerc√≠cios:
Exerc√≠cio 1
Obtenha o valor "Servi√ßos" do array menu:
Copiar
let menu = ['Home', 'Servi√ßos', 'Portf√≥lio', 'Links'];
let menuServices = ;

console.log(menuServices);
Exerc√≠cio 2
Procure o √≠ndice do valor "Portf√≥lio" do array menu:
Copiar
let menu = ['Home', 'Servi√ßos', 'Portf√≥lio', 'Links'];
let indexOfPortfolio = ;

console.log(indexOfPortfolio);
Exerc√≠cio 3
Adicione o valor "Contato" no final do array menu:
Copiar
let menu = ['Home', 'Servi√ßos', 'Portf√≥lio', 'Links'];

console.log(menu);




For
No v√≠deo sobre arrays, aprendemos um pouco sobre o for. Agora nesta se√ß√£o, iremos focar em entender melhor como funciona essa estrutura de repeti√ß√£o. Como vimos, os la√ßos podem executar blocos de c√≥digos in√∫meras vezes. Vamos aprender o que √© o for e aproveitar para ver alguns usos comuns de arrays.
Alguns aqui podem j√° ter visto o v√≠deo da Ana no curso introdut√≥rio da Trybe, mas como vamos repassar esse assunto, veremos o v√≠deo mais uma vez para refrescar a mem√≥ria e seguir com nosso conte√∫do.

Embora seja um recurso da linguagem, o uso do operador de incremento (++) n√£o √© recomendado. O maior problema √© que, embora seu uso principal esteja na gera√ß√£o de um side effect, esse operador sempre ir√° retornar algum valor e, pra piorar, as express√µes (++x) e (x++), embora sejam facilmente confundidas por usar o mesmo operador e possuir o mesmo side effect, retornam valores diferentes.
Levando isso em considera√ß√£o, o uso desse operador pode gerar confus√£o e causar bugs inesperados. Sendo assim, uma vez que o += 1 substitui completamente o ++, recomenda-se o uso exclusivo de += 1, e √© essa a regra que iremos adotar neste conte√∫do daqui pra frente!
Suponha que temos uma lista com marcas de carros:
Copiar
let cars = ['Saab', 'Volvo', 'BMW'];
Anteriormente para apresentar esses valores, o c√≥digo que utilizariamos para executar essa tarefa seria:
Copiar
let cars = ['Saab', 'Volvo', 'BMW'];
console.log(cars[0]); // Saab
console.log(cars[1]); // Volvo
console.log(cars[2]); // BMW
Mas, agora que conhecemos o for, podemos melhorar o c√≥digo para algo como:
Copiar
let cars = ["Saab", "Volvo", "BMW"];

for (let index = 0; index < cars.length; index += 1) {
  console.log(cars[index]);
}
Os dois c√≥digos geram o mesmo resultado, mas o segundo √© muito mais adequado. Pense que, em vez de 3 carros, essa lista possu√≠sse 1000. No primeiro c√≥digo, teriamos que escrever 1000 linhas!
Para fixar fa√ßa o pr√≥ximo exerc√≠cio:
Exerc√≠cio 1
Utilize o for para imprimir os elementos da lista groceryList com o console.log():
Copiar
let groceryList = ['Arroz', 'Feij√£o', 'Alface', 'Melancia'];





For/of
Com a chegada do ES6, ganhamos uma nova funcionalidade para iterar arrays e objetos. Objetos iter√°veis s√£o objetos ou uma estrutura de dados que permite acessar o seu conte√∫do com um for. O for/of nos permite criar loops em objetos iter√°veis como strings, arrays, entre outros, mas vamos focar somente nesses dois!
Veja o exemplo abaixo:
Copiar

let numeros = [1,2,3,4,5];
for(let numero of numeros) {
  console.log(numero);
}

// resultado:
//1
//2
//3
//4
//5
Simples, certo? O la√ßo for/of permite iterar os valores das propriedades, nos retornando os n√∫meros dentro do array numeros
Vamos para outro exemplo:
Copiar

let word = 'Hello';
for (let letter of word) {
  console.log(letter);
}
// resultado:
// "H"
// "e"
// "l"
// "l"
// "o"
Por fim, com o for/of, n√≥s conseguimos somar um valor a cada elemento do array e retorn√°-los da seguinte forma:
Copiar

let arrOfNumbers = [10, 20, 30];
for (let sum of arrOfNumbers) {
  sum += 1;
  console.log(sum);
}
// 11
// 21
// 31
√â importante ressaltar que o for/of n√£o ir√° alterar o array, e sim trazer os valores de dentro, e no caso, adicionando 1 √† soma.
Copiar

console.log(arrOfNumbers);
// Resultado: [10, 20, 30]
Exerc√≠cio 1
Utilize o for/of para imprimir os elementos da lista names com o console.log():
Copiar
let names = ['Jo√£o', 'Maria', 'Ant√¥nio', 'Margarida'];





While/Do
Voc√™ aprendeu a trabalhar com o loop for e agora sabe que ao utiliz√°-lo voc√™ deve informar qual a quantidade de itera√ß√µes ele dever√° realizar mas, j√° parou para pensar o que acontece quando voc√™ n√£o sabe quantas vezes um loop deve se repetir? ü§î
"Por exemplo, quando precisamos descobrir se duas vari√°veis possuem o mesmo valor.
‚ö†Ô∏è Tenha muito cuidado! √â f√°cil causar loops infinitos utilizando o while!
Ao contr√°rio do for, o while executa a itera√ß√£o com apenas uma condi√ß√£o. Enquanto essa condi√ß√£o for verdadeira o conte√∫do de escopo do while vai sendo cumprido e ao encontrar uma condi√ß√£o falsa o bloco √© ent√£o encerrado. Por exemplo:
Copiar

let counter = 0;

while(counter !== 5) {
  counter += 1;
}
Neste caso o while ir√° rodar at√© que a vari√°vel counter alcance o valor 5. Mas e se o valor inicial fosse 6, o que aconteceria?
Ele entraria em um loop infinito, e provavelmente travaria o computador. Para ent√£o n√£o termos esse problema √© importante nos certificarmos do valor inicial que ser√° atribu√≠do.
üí° Dica: com o comando break √© poss√≠vel tamb√©m encerrar o loop while quando assim desejar. Veja um exemplo aqui.
Para o exemplo que falamos anteriormente, a solu√ß√£o utilizando while, seria a seguinte.
Copiar

function dice () { 
    return Math.ceil(Math.random() * 6);
}
let d1 = dice();
let d2 = dice();
while (d1 === d2) {
    d2 = dice();
}
Agora imagine se aqui utiliz√°ssemos o for? Quantas repeti√ß√µes seriam necess√°rias para a vari√°vel d1 ser diferente de d2? Como n√£o sabemos o resultado limite, com o while, resolvemos esse problema!
Saiba mais: H√° outras maneiras de iterarmos sobre uma opera√ß√£o, utilizando o do...while, se quiser saber mais, veja aqui.




Vamos praticar!
Agora que j√° estudamos objetos, arrays e loops, que tal fazermos um exerc√≠cio de programa√ß√£o que precisa de todas essas estruturas para funcionar?
Aula ao vivo! Vamos para o Slack, onde o link estar√° dispon√≠vel.



Exerc√≠cios
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/4.2 (bloco 4, dia 2)
Copiar
$ git checkout -b exercicios/4.2
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-4-introducao-a-javascript-e-logica-de-programacao
$ cd bloco-4-introducao-a-javascript-e-logica-de-programacao
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-2-javascript-array-e-loop-for
$ cd dia-2-javascript-array-e-loop-for
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-4-introducao-a-javascript-e-logica-de-programacao/dia-2-javascript-array-e-loop-for. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/4.2
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/4.2)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/4.2 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/4.2
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/4.2, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº





Agora a pr√°tica
Aprofunde seus conhecimentos
üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ
Leia atentamente os enunciados e fa√ßa o que se pede! Iremos utilizar esse array para realizar os exerc√≠cios do 1 ao 7:
Copiar
let numbers = [5, 9, 3, 19, 70, 8, 100, 2, 35, 27];
Nesse primeiro exerc√≠cio, percorra o array imprimindo todos os valores nele contidos com a fun√ß√£o console.log();
Para o segundo exerc√≠cio, some todos os valores contidos no array e imprima o resultado;
Para o terceiro exerc√≠cio, calcule e imprima a m√©dia aritm√©tica dos valores contidos no array;
A m√©dia aritm√©tica √© o resultado da soma de todos os elementos divido pelo n√∫mero total de elementos.
Com o mesmo c√≥digo do exerc√≠cio anterior, caso o valor final seja maior que 20, imprima a mensagem: "valor maior que 20". Caso n√£o seja, imprima a mensagem: "valor menor ou igual a 20";
üöÄ Utilizando for, descubra qual o maior valor contido no array e imprima-o;
Descubra quantos valores √≠mpares existem no array e imprima o resultado. Caso n√£o exista nenhum, imprima a mensagem: "nenhum valor √≠mpar encontrado";
Utilizando for, descubra qual o menor valor contido no array e imprima-o;
Utilizando for, crie um array que v√° de 1 at√© 25 e imprima o resultado;
Utilizando o array criado no exerc√≠cio anterior imprima o resultado da divis√£o de cada um dos elementos por 2.




B√¥nus
Para os pr√≥ximos dois exerc√≠cios leia este artigo e tente entender o que est√° acontencedo no c√≥digo abaixo:
Copiar
for (let index = 1; index < array.length; index += 1) {
  for (let secondIndex = 0; secondIndex < index; secondIndex += 1) {
    if (array[index] < array[secondIndex]) {
      let position = array[index];
      array[index] = array[secondIndex];
      array[secondIndex] = position;
    }
  }
}
Com base na leitura que fez, considere o array numbers abaixo e fa√ßa os exerc√≠cios:
Copiar
let numbers = [5, 9, 3, 19, 70, 8, 100, 2, 35, 27];
Ordene o array numbers em ordem crescente e imprima seus valores;
Ordene o array numbers em ordem decrescente e imprima seus valores;
Agora crie um novo array a partir do array numbers, sem perd√™-lo. Cada valor do novo array dever√° ser igual ao valor correspondente no array numbers multiplicado pelo seguinte. Por exemplo: o primeiro valor do novo array dever√° ser 45, pois √© a multiplica√ß√£o de 5 (primeiro valor) e 9 (valor seguinte). J√° o segundo valor do novo array dever√° ser 27, pois √© a multiplica√ß√£o de 9 (segundo valor) e 3 (valor seguinte), e assim por diante. Caso n√£o haja pr√≥ximo valor, a multiplica√ß√£o dever√° ser feita por 2. Fa√ßa isso utilizando o for e o m√©todo push. O resultado deve ser o array abaixo:
Copiar

[45, 27, 57, 1330, 560, 800, 200, 70, 945, 54]




