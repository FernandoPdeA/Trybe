O que vamos aprender?
Voc√™ j√° passou por uma grande parte das estruturas mais fundamentais de JavaScript. Hoje, vamos terminar esse assunto e finalizar o aprendizado sobre todos os fundamentos de JavaScript
Voc√™ tamb√©m vai aprender sobre fun√ß√µes, que fazem parte da estrutura fundamental da linguagem.


Voc√™ ser√° capaz de:
Manipular objetos;
Utilizar os comandos for/in e for/of;
Utilizar fun√ß√µes para organizar e estruturar o seu c√≥digo;


A seguir, voc√™ vai aprender sobre objetos, for/in, for/of e fun√ß√µes.


Objetos
Voc√™ j√° aprendeu que as vari√°veis em JavaScript s√£o recipientes ou containers para os dados. Por exemplo:
Copiar
let car = 'Fiat';
Agora √© hora de aprender sobre objetos!
Um objeto em JavaScript √© uma entidade independente, com propriedades e tipos. Uma propriedade √© a associa√ß√£o entre uma chave e um valor, s√£o essas as caracter√≠sticas do objeto.
Pense em um objeto da vida real, como o carro do exemplo acima. Cada carro tem sua cor, peso, tamanho, quantidade de portas e etc. Essas s√£o suas caracter√≠sticas, suas propriedades. E, da mesma forma que funciona um objeto da vida real, funcionam os objetos em JavaScript.
Veja o v√≠deo abaixo para entender melhor o conceito de objetos:

Ent√£o, pessoal, como voc√™s viram, objetos s√£o estruturas ou cole√ß√µes compostas por pares chave-valor. Tamb√©m √© poss√≠vel armazenar um objeto dentro de outro, ou at√© mesmo dentro de um array.
Copiar
let car = {
  type: 'Fiat',
  model: '500',
  color: 'white',
};
Para acessar as chaves dentro de um objeto, temos duas formas:
nota√ß√£o de ponto: car.type
nota√ß√£o de colchetes: car[type]
Se o objeto est√° dentro de um array, ele √© acessado atrav√©s do seu √≠ndice, da mesma forma que se acessaria uma informa√ß√£o num array de strings. As chaves de um objeto s√£o armazenadas como strings e, para conseguir acessar propriedades nomeadas com n√∫meros, como 0, por exemplo, s√≥ √© poss√≠vel usando a nota√ß√£o de colchetes. Se voc√™ usar a nota√ß√£o de ponto, um erro ser√° retornado. Ao usar a nota√ß√£o de colchetes tamb√©m √© poss√≠vel chamar vari√°veis que fazem rela√ß√£o com a chave que voc√™ quer acessar dentro desses colchetes.
As chaves de um objeto s√£o armazenadas como strings e, para conseguir acessar propriedades nomeadas com n√∫meros, como 0, por exemplo, s√≥ √© poss√≠vel usando a nota√ß√£o de colchetes. Se voc√™ usar a nota√ß√£o de ponto, ocorre um erro. Ao usar a nota√ß√£o de colchetes tamb√©m √© poss√≠vel chamar vari√°veis que fazem rela√ß√£o com a chave que voc√™ quer acessar dentro desses colchetes.
Escreva os c√≥digos abaixo no seu VSCode para acompanhar os resultados.
Copiar
let diasDaSemana = {
  1: 'domingo',
  2: 'segunda',
  3: 'ter√ßa',
  4: 'quarta',
  5: 'quinta',
  6: 'sexta',
  7: 's√°bado',
};

diasDaSemana.1; // SyntaxError: Unexpected number
console.log(diasDaSemana['1']); // domingo
No c√≥digo acima, ocorre um erro por usar nota√ß√£o de ponto ao inv√©s de nota√ß√£o de colchetes com uma propriedade nomeada com n√∫mero.
Agora veja este exemplo:
Copiar
let conta = {
  agencia: '0000',
  banco: {
    cod: '012',
    id: 4,
    nome: 'TrybeBank',
  },
};

let infoDoBanco = 'banco';
console.log(conta[infoDoBanco]); // { cod: '012', id: 4, nome: 'TrybeBank' }
console.log(conta[infoDoBanco]['nome']); // TrybeBank

console.log(conta.agencia); // 0000
console.log(conta['agencia']); // 0000

console.log(conta.banco.cod); // 012
console.log(conta['banco']['id']); // 4
Neste exemplo, a chave banco do objeto conta, guarda um outro objeto, e tamb√©m h√° o uso de vari√°vel na nota√ß√£o de colchetes, al√©m de voc√™ poder ver exemplos usando nota√ß√£o de ponto e nota√ß√£o de colchetes.
Neste outro exemplo, veja como vamos adicionar as informa√ß√µes de forma encadeada:
Copiar
let usuario = {
  id: 99,
  email: 'jakeperalta@gmail.com',
  infoPessoal: {
    nome: 'Jake',
    sobrenome: 'Peralta',
    endereco: {
      rua: 'Smith Street',
      bairro: 'Brooklyn',
      cidade: 'Nova Iorque',
      estado: 'Nova Iorque',
    },
  },
};

console.log(usuario['id']); // 99
console.log(usuario.email); // jakeperalta@gmail.com

console.log(usuario.infoPessoal.endereco.rua); // Smith Street
console.log(usuario['infoPessoal']['endereco']['cidade']); // Nova Iorque
O objeto deste exemplo possui a chave infoPessoal que possui outras 3 chaves, uma delas sendo endereco, que √© outro objeto! Ou seja, o objeto usuario possui outros dois dentro dele.
Agora, e se o nosso objeto est√° dentro de um array? Como acessamos as propriedades do objeto? Veja este exemplo:
Copiar
let moradores = [
  {
    nome: 'Luiza',
    sobrenome: 'Guimar√£es',
    andar: 10,
    apartamento: 1005,
  },
  {
    nome: 'William',
    sobrenome: 'Albuquerque',
    andar: 5,
    apartamento: 502,
  },
  {
    nome: 'Murilo',
    sobrenome: 'Ferraz',
    andar: 8,
    apartamento: 804,
  },
  {
    nome: 'Zoey',
    sobrenome: 'Brooks',
    andar: 1,
    apartamento: 101,
  },
];

let primeiroMorador = moradores[0];
console.log(primeiroMorador); // { nome: 'Luiza', sobrenome: 'Guimar√£es', andar: 10, apartamento: 1005 }
console.log(primeiroMorador['andar']); // 10

let ultimoMorador = moradores[moradores.length - 1];
console.log(ultimoMorador); // { nome: 'Zoey', sobrenome: 'Brooks', andar: 1, apartamento: 101 }
console.log(ultimoMorador.nome); // Zoey
Esse √∫ltimo bloco de c√≥digo √© um exemplo de um array composto por objetos. Os objetos desejados foram acessados atrav√©s dos seus √≠ndices e armazenados dentro de vari√°veis para facilitar a compreens√£o.
Perceba que o nome que escolhemos para a fun√ß√£o √© um nome composto, e para a escrita de nomes compostos em JavaScript existem algumas conven√ß√µes. Uma delas √© a kebab case, onde o nome fica separado por um tra√ßo. Apesar de ser uma conven√ß√£o, n√£o √© uma boa pr√°tica de escrita, pois muitas linguagens interpretam o tra√ßo como um sinal de subtra√ß√£o, o que pode ocasionar bugs.
Voc√™ se lembra das regras de nomea√ß√£o de vari√°veis? As mesmas se aplicam aqui. O recomendado √© usar nomes descrit√≠veis para as propriedades, al√©m de escrev√™-las no estilo camelCase.
ATEN√á√ÉO: N√£o use o estilo de escrita kebab-case no JavaScript, isso n√£o √© uma boa pr√°tica porque o tra√ßo pode ser interpretado como um sinal de subtra√ß√£o. Use o estilo camelCase.
Exemplos de escrita camelCase:
nomeCompleto;
cidadeNatal;
tituloOriginal.
Exemplos de escrita kebab-case:
nome-completo;
cidade-natal;
titulo-original.
Para fixar
Agora vamos fazer alguns exerc√≠cios de fixa√ß√£o para consolidar os conhecimentos adquiridos no video anterior! üòâ
1 - Crie um objeto player contendo as vari√°veis listadas abaixo.
Copiar
let name = 'Marta';
let lastName = 'Silva';
let age = 34;
let medals = { golden: 2, silver: 3 };
2 - Acesse as chaves name, lastName e age e concatene as suas informa√ß√µes para imprimir no console uma mensagem no seguinte formato: "A jogadora Marta Silva tem 34 anos de idade".
3 - Adicione ao objeto a chave bestInTheWorld e atribua a esta chave um array contendo as datas em que a jogadora Marta foi considerada a melhor do mundo.
Copiar
[2006, 2007, 2008, 2009, 2010, 2018]
4 - Acesse a chave bestInTheWorld e fa√ßa um console.log no seguinte formato: "A jogadora Marta Silva foi eleita a melhor do mundo por 6 vezes".
5 - Acesse a chave medals e fa√ßa um console.log no seguinte formato: "A jogadora possui 2 medalhas de ouro e 3 medalhas de prata".
Agora veremos uma varia√ß√£o do la√ßo for, que nos garante facilidade ao lidar com objetos.



for/in e for/of

Depois de conhecer o la√ßo for/in, o c√≥digo que mostra as marcas de carros presentes em um Array √©:
Copiar
let cars = ['Saab', 'Volvo', 'BMW'];

for (let index in cars) {
  console.log(cars[index]);
}
Um outro exemplo √© a itera√ß√£o nas chaves de um objeto:
Copiar
let car = {
  type: 'Fiat',
  model: '500',
  color: 'white',
};

for (let index in car) {
  console.log(index, car[index]);
}
O resultado do c√≥digo acima √©:
Copiar
type Fiat
model 500
color white
for/of
O for/of tem uma aplica√ß√£o bastante parecida com o que vimos agora no for/in, mas com uma diferen√ßa crucial.
Como dito no v√≠deo, o for/in percorre as propriedades dos objetos que forem enumer√°veis com base na ordem de inser√ß√£o, e n√£o nos valores das propriedades, ou seja, nos retorna o √≠ndice. Por exemplo, se tivermos um array com tr√™s strings dentro:
Copiar
let food = ['hamburguer', 'bife', 'acaraj√©'];
As propriedades dos elementos do array ser√£o os √≠ndices de cada posi√ß√£o, come√ßando por zero. √â por isso que os n√∫meros retornados pelo console.log s√£o 0, 1 e 2: as propriedades que correspondem ao √≠ndice de cada posi√ß√£o do array.
Copiar
for (let position in food) {
  console.log(position);
};
//resultado: 0, 1, 2;
Se percorrermos um objeto, tamb√©m teremos o mesmo resultado. O for/in ir√° percorrer a propriedade declarada, e n√£o o seu valor em si.
J√° o for/of percorre os elementos dos objetos iter√°veis atrav√©s dos seus respectivos valores, e n√£o dos √≠ndices como o for/in. Vejamos o exemplo:
Copiar
let food = ['hamburguer', 'bife', 'acaraj√©'];
for (let value of food) {
  console.log(value);
};
//resultado: hamburguer, bife, acaraj√©;
Legal, n√©?
Para fixar
No exemplo acima, utilizamos o for/of para percorrer o nosso iter√°vel e nos retornar o valor dos √≠ndices.
Agora que voc√™ j√° sabe a diferen√ßa entre eles e como us√°-los, vamos praticar?
1 - Usando o objeto abaixo, utilize for/in e imprima no console a mensagem 'Ol√° xxxxx' para cada nome, substituindo o xxxxx pelo nome em quest√£o.
Copiar
let names = {
  person1: 'Jo√£o',
  person2: 'Maria',
  person3: 'Jorge',
};
2 - Usando o objeto abaixo, utilize for/in e imprima um console.log com as chaves e valores desse objeto.
Copiar
let car = {
  model: 'A3 Sedan',
  manufacturer: 'Audi',
  year: 2020
};



Fun√ß√µes
√â comum, no come√ßo da carreira de uma pessoa programadora a escrita de programas muito extensos, repetitivos e confusos de se entender. Nesse caso, √© recomendado a utiliza√ß√£o das fun√ß√µes como forma de deixar seu algoritmo mais simples, leg√≠vel e enxuto.
Mas o que √© uma fun√ß√£o exatamente? Segundo o MDN, fun√ß√£o √© um conjunto de instru√ß√µes que executa uma tarefa ou calcula um valor.
Fun√ß√µes s√£o a forma mais essencial de organiza√ß√£o de c√≥digo e de l√≥gica na programa√ß√£o; usando-as voc√™ consegue dividir seu c√≥digo em blocos l√≥gicos e deixar as coisas mais organizadas.
Com isso, √© poss√≠vel diminuir o tamanho do seu c√≥digo, acabar com a repeti√ß√£o e ser mais f√°cil a leitura e entendimento, pois a l√≥gica do programa estar√° muito bem dividida.
Para entender melhor o que √© uma fun√ß√£o, veja o v√≠deo abaixo:

Conseguiu pegar a ideia? Se voc√™ ainda n√£o se sente confort√°vel o bastante, tente ver o v√≠deo novamente e depois volte aqui para mais alguns exemplos.
Como foi visto, √© poss√≠vel criar fun√ß√µes que recebem ou n√£o par√¢metros. E, para decidir se a sua fun√ß√£o precisa ou n√£o deles, voc√™ deve pensar em sua l√≥gica.
Por exemplo, se a fun√ß√£o tiver o objetivo de cumprimentar a pessoa que est√° executando o programa pelo nome, tal como: "Bom dia, Jo√£o!", ela vai precisar receber o nome da pessoa como par√¢metro. Por√©m, se ela foi desenvolvida apenas para dar "Bom dia!", um par√¢metro n√£o √© necess√°rio.
Veja o exemplo abaixo:
Copiar

// Sem fun√ß√£o
let nome = 'Jo√£o';

console.log('Bom dia, ' + nome);


// Com fun√ß√£o
function bomDiaTryber(nome) {
  console.log('Bom dia, ' + nome);
}

bomDiaTryber('Jo√£o'); // Bom dia, Jo√£o
bomDiaTryber('Julia'); // Bom dia, Julia
bomDiaTryber('Marcelo'); // Bom dia, Marcelo
Com base nesse exemplo, se voc√™ optasse por n√£o usar fun√ß√£o e precisasse dar bom dia para pessoas diferentes v√°rias vezes durante o c√≥digo, teria que estar sempre mudando o valor da vari√°vel nome e sempre escrevendo a mesma mensagem, o que pode acabar gerando erros de digita√ß√£o e causar erros na sua aplica√ß√£o.
Veja dois exemplos de fun√ß√µes sem par√¢metros:
Copiar
function bomDia() {
  return 'Bom dia!';
}

console.log(bomDia()); // Bom dia!
Copiar
let status = 'deslogado';

function logarDeslogar() {
  if (status === 'deslogado') {
    status = 'logado';
  } else {
    status = 'deslogado';
  }
}

console.log(status); // deslogado

logarDeslogar();
console.log(status); // logado

logarDeslogar();
console.log(status); // deslogado

console.log('O usu√°rio est√° ' + status); // O usu√°rio est√° deslogado
E agora exemplos de fun√ß√µes usando par√¢metros:
Copiar
// Com fun√ß√£o
function soma(a, b) {
  return a + b;
}

console.log(soma(5, 2)); // 7
Copiar
function maiorNum(primeiroNum, segundoNum) {
  if (primeiroNum > segundoNum) {
    return primeiroNum + ' √© maior que ' + segundoNum;
  } else if (segundoNum > primeiroNum) {
    return segundoNum + ' √© maior que ' + primeiroNum;
  } else {
    return 'Os n√∫meros s√£o iguais';
  }
}

console.log(maiorNum(10, 20)); // 20 √© maior que 10
console.log(maiorNum(2, -5)); // 2 √© maior que -5
console.log(maiorNum(1, 1)); // Os n√∫meros s√£o iguais
Ah, se lembra sobre a complexidade de c√≥digo? Surpresa! √â comum esse erro aparecer enquanto voc√™ escreve suas primeiras fun√ß√µes, n√£o se assuste! O que voc√™ precisa fazer √© quebr√°-las em partes menores ou at√© mesmo criar subfun√ß√µes que podem ser chamadas dentro dessas fun√ß√µes. Existem tecnologias que apontam esses erros de complexidade no seu terminal, como o ESLint,, por exemplo.
Essa tarefa fica mais f√°cil quando voc√™ entende que cada fun√ß√£o deve ter apenas um prop√≥sito, evite criar uma fun√ß√£o que fa√ßa v√°rias coisas diferentes e que n√£o tem liga√ß√£o uma com a outra! N√£o √© recomend√°vel que uma fun√ß√£o tenha muitas finalidades como dizer "oi", multiplicar dois n√∫meros e dizer qual √© a esta√ß√£o do ano. √â melhor voc√™ dividir isso tudo em 3 fun√ß√µes diferentes, pois al√©m de diminuir a complexidade, fica melhor para entender e us√°-las em outras partes do c√≥digo.

Achou complicado? Calma, no come√ßo √© normal essa confus√£o e voc√™ pode n√£o entender a vantagem do uso de fun√ß√µes. Mas, conforme voc√™ avan√ßar no curso, as fun√ß√µes ser√£o suas melhores amigas. N√£o fique com medo, elas servem para te ajudar e deixar sua trajet√≥ria como pessoa programadora um pouco mais f√°cil!
Que tal praticar um pouco?
Pegue cada um dos exerc√≠cios de 1 a 5 do final do dia 4.1 e fa√ßa com que todos eles sejam fun√ß√µes de um mesmo arquivo. As vari√°veis que voc√™ define no come√ßo de cada arquivo devem ser removidas e transformadas em par√¢metros das fun√ß√µes.
Ap√≥s refatorar o seu c√≥digo, verifique se ele ainda est√° funcionando conforme especificado. Teste cada fun√ß√£o com algumas entradas diferentes.



Vamos praticar!
Partiu praticar esses conceitos em conjunto?!
Aula ao vivo! Vamos para o Slack, onde o link estar√° dispon√≠vel


Exerc√≠cios
Agora vamos exercitar a utiliza√ß√£o de objetos e fun√ß√µes. Voc√™ ver√° que alguns assuntos, como l√≥gica condicional e loops, entre outros, v√£o reaparecer frequentemente nos nossos exerc√≠cios.
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/4.4 (bloco 4, dia 4)
Copiar
$ git checkout -b exercicios/4.4
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-4-introducao-a-javascript-e-logica-de-programacao
$ cd bloco-4-introducao-a-javascript-e-logica-de-programacao
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-4-javascript-objetos-e-funcoes
$ cd dia-4-javascript-objetos-e-funcoes
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-4-introducao-a-javascript-e-logica-de-programacao/dia-4-javascript-objetos-e-funcoes. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/4.4
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/4.4)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/4.4 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/4.4
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/4.4, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº



Agora a pr√°tica
Bora fixar o conte√∫do de hoje?! üéØ üí™
üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ



Parte I - Objetos e For/In
Usando o objeto abaixo, fa√ßa os exerc√≠cios a seguir:
Copiar
let info = {
  personagem: 'Margarida',
  origem: 'Pato Donald',
  nota: 'Namorada do personagem principal nos quadrinhos do Pato Donald',
};
1 - Imprima no console uma mensagem de boas-vindas para a personagem acima, incluindo seu nome. Valor esperado no console:
Copiar
Bem-vinda, Margarida
üöÄ 2 - Insira no objeto uma nova propriedade com o nome de chave 'recorrente' e o valor 'Sim' e, em seguida, imprima o objeto no console. Valor esperado no console:
Copiar
{
  personagem: 'Margarida',
  origem: 'Pato Donald',
  nota: 'Namorada do personagem principal nos quadrinhos do Pato Donald',
  recorrente: 'Sim'
}
3 - Fa√ßa um for/in que mostre todas as chaves do objeto. Valor esperado no console:
Copiar
personagem
origem
nota
recorrente
4 - Fa√ßa um novo for/in, mas agora mostre todos os valores das chaves do objeto. Valor esperado no console:
Copiar
Margarida
Pato Donald
Namorada do personagem principal nos quadrinhos do Pato Donald
Sim
5 - Agora, defina um segundo objeto com a mesma estrutura (as mesmas chaves) do primeiro e os seguintes valores: 'Tio Patinhas', 'Christmas on Bear Mountain, Dell's Four Color Comics #178', 'O √∫ltimo MacPatinhas', 'Sim'. Ent√£o, imprima os valores de cada objeto juntos de acordo com cada uma das chaves. Valor esperado no console:
Copiar
Margarida e Tio Patinhas
Pato Donald e Christmas on Bear Mountain, Dell's Four Color Comics #178
Namorada do personagem principal nos quadrinhos do Pato Donald e O √∫ltimo MacPatinhas
Ambos recorrentes // Aten√ß√£o para essa √∫ltima linha!
Usando o objeto abaixo, fa√ßa os exerc√≠cios a seguir:
Copiar
let leitor = {
  nome: 'Julia',
  sobrenome: 'Pessoa',
  idade: 21,
  livrosFavoritos: [
    {
      titulo: 'O Pior Dia de Todos',
      autor: 'Daniela Kopsch',
      editora: 'Tordesilhas',
    },
  ],
};
üöÄ 6 - Acesse as chaves nome, sobrenome e titulo, que est√° dentro da chave livrosFavoritos, e fa√ßa um console.log no seguinte formato: "O livro favorito de Julia Pessoa se chama 'O Pior Dia de Todos'".
üöÄ 7 - Adicione um novo livro favorito na chave livrosFavoritos, que √© um array. Atribua a esta chave um objeto contendo as seguintes informa√ß√µes:
Copiar
{
  titulo: 'Harry Potter e o Prisioneiro de Azkaban',
  autor: 'JK Rowling',
  editora: 'Rocco',
}
üöÄ 8 - Acesse as chaves nome e livrosFavoritos e fa√ßa um console.log no seguinte formato: "Julia tem 2 livros favoritos".



Parte I - Objetos e For/In
Usando o objeto abaixo, fa√ßa os exerc√≠cios a seguir:
Copiar
let info = {
  personagem: 'Margarida',
  origem: 'Pato Donald',
  nota: 'Namorada do personagem principal nos quadrinhos do Pato Donald',
};
1 - Imprima no console uma mensagem de boas-vindas para a personagem acima, incluindo seu nome. Valor esperado no console:
Copiar
Bem-vinda, Margarida
üöÄ 2 - Insira no objeto uma nova propriedade com o nome de chave 'recorrente' e o valor 'Sim' e, em seguida, imprima o objeto no console. Valor esperado no console:
Copiar
{
  personagem: 'Margarida',
  origem: 'Pato Donald',
  nota: 'Namorada do personagem principal nos quadrinhos do Pato Donald',
  recorrente: 'Sim'
}
3 - Fa√ßa um for/in que mostre todas as chaves do objeto. Valor esperado no console:
Copiar
personagem
origem
nota
recorrente
4 - Fa√ßa um novo for/in, mas agora mostre todos os valores das chaves do objeto. Valor esperado no console:
Copiar
Margarida
Pato Donald
Namorada do personagem principal nos quadrinhos do Pato Donald
Sim
5 - Agora, defina um segundo objeto com a mesma estrutura (as mesmas chaves) do primeiro e os seguintes valores: 'Tio Patinhas', 'Christmas on Bear Mountain, Dell's Four Color Comics #178', 'O √∫ltimo MacPatinhas', 'Sim'. Ent√£o, imprima os valores de cada objeto juntos de acordo com cada uma das chaves. Valor esperado no console:
Copiar
Margarida e Tio Patinhas
Pato Donald e Christmas on Bear Mountain, Dell's Four Color Comics #178
Namorada do personagem principal nos quadrinhos do Pato Donald e O √∫ltimo MacPatinhas
Ambos recorrentes // Aten√ß√£o para essa √∫ltima linha!
Usando o objeto abaixo, fa√ßa os exerc√≠cios a seguir:
Copiar
let leitor = {
  nome: 'Julia',
  sobrenome: 'Pessoa',
  idade: 21,
  livrosFavoritos: [
    {
      titulo: 'O Pior Dia de Todos',
      autor: 'Daniela Kopsch',
      editora: 'Tordesilhas',
    },
  ],
};
üöÄ 6 - Acesse as chaves nome, sobrenome e titulo, que est√° dentro da chave livrosFavoritos, e fa√ßa um console.log no seguinte formato: "O livro favorito de Julia Pessoa se chama 'O Pior Dia de Todos'".
üöÄ 7 - Adicione um novo livro favorito na chave livrosFavoritos, que √© um array. Atribua a esta chave um objeto contendo as seguintes informa√ß√µes:
Copiar
{
  titulo: 'Harry Potter e o Prisioneiro de Azkaban',
  autor: 'JK Rowling',
  editora: 'Rocco',
}
üöÄ 8 - Acesse as chaves nome e livrosFavoritos e fa√ßa um console.log no seguinte formato: "Julia tem 2 livros favoritos".




