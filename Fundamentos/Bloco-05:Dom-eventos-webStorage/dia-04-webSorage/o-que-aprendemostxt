O que vamos aprender?
Voc√™ aprender√° sobre Web Storage. Web Storage prov√™ mecanismos para que as aplica√ß√µes web possam salvar dados nos browsers das pessoas.
Antes do HTML 5, as aplica√ß√µes tinham que salvar os dados locais em cookies, que eram enviados para o servidor a cada requisi√ß√£o do browser. Web Storage √© mais seguro e tem a capacidade de salvar uma quantidade maior de dados sem afetar o desempenho da p√°gina.
Ao contr√°rio dos Cookies, o limite de armazenamento √© muito maior (pelo menos 5MB), e as informa√ß√µes n√£o s√£o transferidas para o servidor durante as requisi√ß√µes.
Web Storage √© por origem (por dom√≠nio e protocolo). Todas as p√°ginas de uma origem podem salvar e acessar os mesmos dados. Por exemplo, se o dom√≠nio betrybe.com salva o dado X no Web Storage, o dom√≠nio course.betrybe.com consegue ler esse dado X.




Voc√™ ser√° capaz de:
Manipular o objeto localStorage;
Manipular o objeto sessionStorage.



Por que isso √© importante?
Salvar dados no browser das pessoas que acessam uma determinada p√°gina web √© muito √∫til, pois podemos fazer com que essa p√°gina consuma esses dados e apresente diferentes conte√∫dos e a√ß√µes para diferentes pessoas.
Quando voc√™ inicia um v√≠deo no YouTube e depois retorna, o v√≠deo continua de onde parou. Um carrinho de compras de um site permanece com os itens que voc√™ adicionou durante semanas e uma p√°gina √© apresentada j√° com o seu nome, e voc√™ nem fez login.
Esses s√£o exemplos de aplica√ß√µes que utilizam o browser para salvar esses dados e facilitar a cria√ß√£o de tais funcionalidades.
Esse armazenamento local √© o conte√∫do de hoje, Web Storage.



Conte√∫dos
A seguir, voc√™ ir√° aprender como utilizar cookies, localStorage e sessionStorage para salvar informa√ß√µes. Tamb√©m saber√° quais s√£o as diferen√ßas entre estes m√©todos e quando utilizar cada um deles.
De olho na dica üëÄ: Esse conte√∫do √© essencial para realizar os pr√≥ximos projetos e √© muito importante para a sua jornada em front-end. Portanto, foca no estudos e pratique bastante! ü¶≠üßë‚Äçüíª



Cookies
Cookies s√£o dados salvos em pequenos arquivos de texto no computador da pessoa que utiliza a Internet.
Quando o servidor envia a p√°gina Web para o browser, a conex√£o √© desligada e o servidor n√£o tem mais acesso √†s informa√ß√µes da requisi√ß√£o - como os itens que a pessoa usu√°ria adicionou a um carrinho de compras ou o e-mail que lhe dar√° acesso a sua conta. Cookies foram inventados para salvar dados das pessoas usu√°rias no pr√≥prio browser, pois, dessa forma, uma p√°gina conseguir√° acess√°-los para executar uma l√≥gica com os par√¢metros personalizados por pessoa.
Cookies s√£o salvos no formato chave-valor. Quando o navegador faz a requisi√ß√£o ao servidor para acessar uma p√°gina Web, os cookies dessa p√°gina s√£o adicionados √† requisi√ß√£o. Dessa forma, o servidor tem acesso aos dados da pessoa usu√°ria. Nos exemplos a seguir, voc√™ ir√° aprender a criar e manipular cookies. Para test√°-los, √© importante que o seu navegador tenha o suporte a cookie habilitado. Para visualizar os cookies de uma aplica√ß√£o, abra a janela para inspecionar a p√°gina. No menu superior, clique em Application e na barra lateral esquerda, na sess√£o Storage, clique em Cookies.
O Javascript permite que a gente crie, leia e delete cookie atrav√©s da propriedade document.cookie.
Para criar um cookie, voc√™ s√≥ precisa atribuir √† propriedade document.cookie uma string contendo o nome e o valor do que se pretende armazenar:
Copiar
document.cookie = 'email=isabella@email.com';
Por defini√ß√£o, o cookie √© deletado quando fechamos o navegador. Para que isso n√£o aconte√ßa, voc√™ pode adicionar uma data para expira√ß√£o como no exemplo abaixo:
Copiar
document.cookie = 'email=isabella@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC';
Voc√™ pode adicionar tamb√©m o par√¢metro path que dir√° ao navegador qual caminho o cookie que voc√™ criou pertence. Por padr√£o, o cookie pertence √† p√°gina atual.
Copiar
document.cookie = 'email=isabella@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC; path=/';
O Javascript permite que voc√™ atribua document.cookie a uma vari√°vel. Assim, voc√™ conseguir√° ler as informa√ß√µes que est√£o armazenadas. No exemplo abaixo, ao imprimirmos no console o valor de myCookie, o que ser√° retornado √© uma string contendo o nome e o valor do cookie. Quando temos mais de um par chave-valor, a vari√°vel armazenar√° em uma √∫nica string os pares separados por ponto-v√≠rgula.
Copiar
const myCookie = document.cookie;
console.log(myCookie) // email=isabella@email.com
E voc√™ pode tamb√©m alterar o valor do cookie da mesma forma que o criamos. Basta atribuir a document.cookie a nova informa√ß√£o que voc√™ quer armazenar.
Copiar
document.cookie = 'email=cleyton@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC';
Para deletar o cookie, voc√™ n√£o precisa especificar o valor que pretende deletar. Voc√™ pode delet√°-lo passando uma data que j√° expirou:
Copiar
document.cookie = 'email=; expires=Tue, 01 Dec 2020 12:00:00 UTC;'




Cookies
Cookies s√£o dados salvos em pequenos arquivos de texto no computador da pessoa que utiliza a Internet.
Quando o servidor envia a p√°gina Web para o browser, a conex√£o √© desligada e o servidor n√£o tem mais acesso √†s informa√ß√µes da requisi√ß√£o - como os itens que a pessoa usu√°ria adicionou a um carrinho de compras ou o e-mail que lhe dar√° acesso a sua conta. Cookies foram inventados para salvar dados das pessoas usu√°rias no pr√≥prio browser, pois, dessa forma, uma p√°gina conseguir√° acess√°-los para executar uma l√≥gica com os par√¢metros personalizados por pessoa.
Cookies s√£o salvos no formato chave-valor. Quando o navegador faz a requisi√ß√£o ao servidor para acessar uma p√°gina Web, os cookies dessa p√°gina s√£o adicionados √† requisi√ß√£o. Dessa forma, o servidor tem acesso aos dados da pessoa usu√°ria. Nos exemplos a seguir, voc√™ ir√° aprender a criar e manipular cookies. Para test√°-los, √© importante que o seu navegador tenha o suporte a cookie habilitado. Para visualizar os cookies de uma aplica√ß√£o, abra a janela para inspecionar a p√°gina. No menu superior, clique em Application e na barra lateral esquerda, na sess√£o Storage, clique em Cookies.
O Javascript permite que a gente crie, leia e delete cookie atrav√©s da propriedade document.cookie.
Para criar um cookie, voc√™ s√≥ precisa atribuir √† propriedade document.cookie uma string contendo o nome e o valor do que se pretende armazenar:
Copiar
document.cookie = 'email=isabella@email.com';
Por defini√ß√£o, o cookie √© deletado quando fechamos o navegador. Para que isso n√£o aconte√ßa, voc√™ pode adicionar uma data para expira√ß√£o como no exemplo abaixo:
Copiar
document.cookie = 'email=isabella@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC';
Voc√™ pode adicionar tamb√©m o par√¢metro path que dir√° ao navegador qual caminho o cookie que voc√™ criou pertence. Por padr√£o, o cookie pertence √† p√°gina atual.
Copiar
document.cookie = 'email=isabella@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC; path=/';
O Javascript permite que voc√™ atribua document.cookie a uma vari√°vel. Assim, voc√™ conseguir√° ler as informa√ß√µes que est√£o armazenadas. No exemplo abaixo, ao imprimirmos no console o valor de myCookie, o que ser√° retornado √© uma string contendo o nome e o valor do cookie. Quando temos mais de um par chave-valor, a vari√°vel armazenar√° em uma √∫nica string os pares separados por ponto-v√≠rgula.
Copiar
const myCookie = document.cookie;
console.log(myCookie) // email=isabella@email.com
E voc√™ pode tamb√©m alterar o valor do cookie da mesma forma que o criamos. Basta atribuir a document.cookie a nova informa√ß√£o que voc√™ quer armazenar.
Copiar
document.cookie = 'email=cleyton@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC';
Para deletar o cookie, voc√™ n√£o precisa especificar o valor que pretende deletar. Voc√™ pode delet√°-lo passando uma data que j√° expirou:
Copiar
document.cookie = 'email=; expires=Tue, 01 Dec 2020 12:00:00 UTC;'




Local e Session Storage
HTML Web Storage prov√™ dois objetos para armazenamento de dados no cliente (browser da pessoa), no formato de chave-valor de um modo mais intuitivo do que nos Cookies:
localStorage - salva os dados sem data de expira√ß√£o. Os dados n√£o ser√£o removidos quando o browser for fechado, ou seja, eles ficar√£o dispon√≠veis enquanto n√£o forem explicitamente removidos.
Para os exemplos a seguir, voc√™ pode usar o seguinte c√≥digo em seu index.html para poder usar o Live Server. Mas se preferir, pode executar os comandos no console tamb√©m.
Copiar
<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <h1>D√™ uma olhada no seu console para checar os exemplos sendo impressos.<br />;)</h1>
  <script src="script.js"></script>
</body>
</html>
Exemplo de utiliza√ß√£o:
Copiar
console.log(localStorage.length); // n√£o possui nada salvo, ent√£o o retorno √© o valor: 0
localStorage.setItem('firstname', 'Adam'); // salva uma entrada com a key = 'firstname' e value = 'Adam'
localStorage.setItem('lastname', 'Smith'); // salva uma entrada com a key = 'lastname' e value = 'Smith'
console.log(localStorage.getItem('lastname')); // retorna o valor 'Smith'
console.log(localStorage.length); // possui duas entradas, ent√£o o retorno √© o valor: 2
localStorage.removeItem('lastname'); // remove a entrada referente a key = 'lastname'
console.log(localStorage.length); // possui uma entrada, ent√£o o retorno √© o valor: 1
localStorage.clear(); // limpa todas as entradas salvas em localStorage
console.log(localStorage.length); // n√£o possui nada salvo, ent√£o o retorno √© o valor: 0
sessionStorage - salva os dados apenas para a sess√£o atual. Os dados s√£o removidos assim que a pessoa fecha a aba (tab) ou o navegador (browser).
Exemplo de utiliza√ß√£o:
Copiar
console.log(sessionStorage.length); // n√£o possui nada salvo, ent√£o o retorno √© o valor: 0
sessionStorage.setItem('firstname', 'Adam'); // salva uma entrada com a key = 'firstname' e value = 'Adam'
sessionStorage.setItem('lastname', 'Smith'); // salva uma entrada com a key = 'lastname' e value = 'Smith'
console.log(sessionStorage.getItem('lastname')); // retorna o valor 'Smith'
console.log(sessionStorage.length); // possui duas entradas, ent√£o o retorno √© o valor: 2
sessionStorage.removeItem('lastname'); // remove a entrada referente a key = 'lastname'
console.log(sessionStorage.length); // possui uma entrada, ent√£o o retorno √© o valor: 1
sessionStorage.clear(); // limpa todas as entradas salvas em sessionStorage
console.log(sessionStorage.length); // n√£o possui nada salvo, ent√£o o retorno √© o valor: 0
OBS: Tanto o localStorage quanto o sessionStorage, armazenam dados no formato chave e valor e os valores salvos ser√£o sempre no formato string.
Isso quer dizer que n√£o podemos armazenar qualquer outro formato? N√£o exatamente. Existem duas fun√ß√µes que ir√£o nos ajudar a armazenar qualquer tipo de dado: uma vai transformar o dado em uma string JSON.stringify() e a outra vai transformar o dado de volta para o formato original JSON.parse().
Ficou confuso? N√£o se preocupe, veja os exemplos abaixo:
Copiar
const myObj = {
  name: 'Link',
  age: 20,
};

// Precisamos transformar este objeto em uma string. Para isso, utilizamos a fun√ß√£o `JSON.stringify()`.

localStorage.setItem('myData', JSON.stringify(myObj));

// Como dito anteriormente, o `localStorage` armazena dados no formato chave e valor, sendo os valores sempre string. Para isso, precisamos passar como primeiro par√¢metro do m√©todo `setItem()` o nome da chave, passamos `myData` e como segundo par√¢metro, a fun√ß√£o `JSON.stringify()` com o objeto-valor que queremos armazenar na chave `myData`. Feito isso, teremos salvo no `localStorage` um objeto com a chave `myData` e o valor `{ "name": "Link", "age": 20 }`.

// Agora, precisamos recuperar o objeto armazenado, mas queremos ele no formato original e n√£o como uma string. Para isso, utilizaremos a fun√ß√£o `JSON.parse()`.

const recoveredObject = JSON.parse(localStorage.getItem('myData'));

// Utilizamos a fun√ß√£o `JSON.parse()` para transformar a string que est√° armazenada no `localStorage` de volta para seu formato original, um objeto.

console.log(recoveredObject); // { name: 'Link', age: 20 }
Relembrando üß†: Ao salvar strings no localStorage, n√£o √© necess√°rio utilizar o JSON.stringify e nem o JSON.parse para recuperar as informa√ß√µes. Combinado?
Veja agora mais exemplos do que pode ser salvo no localStorage ou sessionStorage:
Copiar
let organization = {
  name: 'trybe',
  since: 2019,
};

// A vari√°vel 'storage' pode ser localStorage ou sessionStorage
let storage = localStorage;

storage.setItem('escola', JSON.stringify(organization));
let org = JSON.parse(storage.getItem('escola'));
console.log(org); // { name: 'trybe', since: 2019 }

let classes = ['2019/set', '2019/oct'];
storage.setItem('turmas', JSON.stringify(classes));
let cls = JSON.parse(storage.getItem('turmas'));
console.log(cls); // ['2019/set', '2019/oct']
Veja o v√≠deo mostrando o uso de localStorage e sessionStorage:

No v√≠deo, a pessoa acessa a aba "Application" para ver a parte de Local Storage e Session Storage, e voc√™ pode ver como acess√°-la com o aux√≠lio do GIF abaixo:
Gif exibindo o acesso √† aba Application no Google Chrome
√â muito mais simples utilizar localStorage e sessionStorage do que Cookies, mas o uso de Cookies n√£o √© totalmente dispens√°vel.
Em regra geral, utilizamos Cookies quando precisamos dos dados no cliente (browser) e no servidor, pois os Cookies s√£o enviados para o servidor a cada requisi√ß√£o. Caso contr√°rio, utilizamos localStorage e sessionStorage.
Exemplo de utiliza√ß√£o:
Para os dois pr√≥ximos exemplos, use separadamente cada script.
index.html
Copiar
<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Exemplo WebStorage</title>
</head>
<body>
  <header>
    <h1>Diferen√ßas de armazenamento entre LocalStorage e WebStorage</h1>
  </header>
  <main>
    <section>
      <h2>Frases armazenadas</h2>
      <input type="text" id="phrases-input" />
      <button id="add-button">Adicionar frase</button>
      <div>
        <ul id="phrases-list">
        </ul>
      </div>
    </section>
  </main>
  <script src="script.js"></script>
</body>
</html>
O script abaixo exemplifica um dos usos do localStorage. Recomendamos tirar um tempo para analisar bem cada fun√ß√£o.
Um bom ponto de aten√ß√£o para decidir quando voc√™ deve usar um ou outro √© perguntar a si mesmo sobre a import√¢ncia da perman√™ncia da informa√ß√£o que voc√™ vai armazenar.
script.js
Copiar
const button = document.getElementById('add-button');
const input = document.getElementById('phrases-input');
const list = document.getElementById('phrases-list');

function insertPhraseInDOM() {
  const phrasesList = JSON.parse(localStorage.getItem('phrases'));
  const listLength = phrasesList.length - 1;
  const phraseText = phrasesList[listLength];
  const phrase = document.createElement('li');
  phrase.innerText = phraseText;
  list.appendChild(phrase);
}

function addPhraseToLocalStorage() {
  const oldList = JSON.parse(localStorage.getItem('phrases'));
  const phraseText = input.value;
  oldList.push(phraseText);
  localStorage.setItem('phrases', JSON.stringify(oldList));
  insertPhraseInDOM();
}

function initialRenderization() {
  if (localStorage.getItem('phrases') === null) {
    localStorage.setItem('phrases', JSON.stringify([]));
  } else {
    const phrasesList = JSON.parse(localStorage.getItem('phrases'));
    const listLength = phrasesList.length - 1;
    for (let index = 0; index <= listLength; index += 1) {
      const listElement = document.createElement('li');
      listElement.innerText = phrasesList[index];
      list.appendChild(listElement);
    }
  }
}

button.addEventListener('click', addPhraseToLocalStorage);

window.onload = function() {
  initialRenderization();
};
E o pr√≥ximo script tem a mesma funcionalidade que o anterior. Mas a diferen√ßa se d√° no momento em que voc√™ fecha a sua aba ou o seu navegador. N√≥s encorajamos voc√™ a experimentar por si s√≥ e ver o que acontece.
script.js
Copiar
const button = document.getElementById('add-button');
const input = document.getElementById('phrases-input');
const list = document.getElementById('phrases-list');

function insertPhraseInDOM() {
  const phrasesList = JSON.parse(sessionStorage.getItem('phrases'));
  const listLength = phrasesList.length - 1;
  const phraseText = phrasesList[listLength];
  const phrase = document.createElement('li');
  phrase.innerText = phraseText;
  list.appendChild(phrase);
}

function addPhraseToSessionStorage() {
  if (sessionStorage.getItem('phrases') === null) {
    sessionStorage.setItem('phrases', JSON.stringify([]));
  }
  const oldList = JSON.parse(sessionStorage.getItem('phrases'));
  const phraseText = input.value;
  oldList.push(phraseText);
  sessionStorage.setItem('phrases', JSON.stringify(oldList));
  insertPhraseInDOM();
}

button.addEventListener('click', addPhraseToSessionStorage);
Tenha em mente que os usos do webStorage s√£o extremamente amplos e n√£o est√£o limitados a esses exemplos. Acreditamos na sua criatividade para fazer coisas mais engenhosas que essas que mostramos. As ferramentas est√£o em suas m√£os e n√£o se esque√ßa de tirar quaisquer d√∫vidas com colegas e instrutores. ;)



Vamos praticar!
√â hora de colocar em pr√°tica todo esse conhecimento. üí™ Vamos ver como utilizar tudo o que aprendemos sobre Web storage.
Aula ao vivo! Vamos para o Slack, onde o link estar√° dispon√≠vel.



Exerc√≠cios
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/5.4 (bloco 5, dia 4)
Copiar
$ git checkout -b exercicios/5.4
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-5-javascript-dom-eventos-e-web-storage
$ cd bloco-5-javascript-dom-eventos-e-web-storage
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-4-javascript-web-storage
$ cd dia-4-javascript-web-storage
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-5-javascript-dom-eventos-e-web-storage/dia-4-javascript-web-storage. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/5.4
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/5.4)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/5.4 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/5.4
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/5.4, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº



Aprofunde seus conhecimentos
Imagine que voc√™ √© a pessoa respons√°vel por desenvolver uma p√°gina que servir√° como um leitor de conte√∫do escrito.
Esse conte√∫do escrito pode ser uma p√°gina de livro, uma reportagem de revista ou uma nota de jornal online. Para que voc√™ n√£o tenha que pensar no conte√∫do da p√°gina, utilize este link para gerar o texto para sua p√°gina.
At√© aqui, nenhuma novidade, mas essa demanda exige que voc√™ aplique prefer√™ncias das pessoas leitoras na p√°gina para melhorar a experi√™ncia de leitura dessas pessoas.
As pessoas devem ter o poder de alterar:
Cor de fundo da tela;
Cor do texto;
Tamanho da fonte;
Espa√ßamento entre as linhas do texto;
Tipo da fonte (Font family).
Essas prefer√™ncias devem ser salvas de forma que, ao retornar √† p√°gina, as prefer√™ncias que foram previamente configuradas possam ser aplicadas na tela.
B√¥nus
As propriedades descritas acima s√£o obrigat√≥rias, mas voc√™ √© livre para adicionar qualquer outra propriedade que julgar v√°lida e que tenha como objetivo a melhora da experi√™ncia da pessoa que l√™ em sua p√°gina.




