[DO que vamos aprender?
Aqui voc√™ vai aprender sobre a linguagem de programa√ß√£o JavaScript. üöÄüöÄüöÄ
Para isso, dividimos o conte√∫do em cinco partes:
Primeiro voc√™ aprender√° sobre vari√°veis, constantes, tipos primitivos, tipagem din√¢mica, operadores aritm√©ticos, operadores de atribui√ß√£o, operadores l√≥gicos, if/else e switch/case:
JavaScript - Primeiros passos
Essa parte apresenta arrays e for:
JavaScript - Array e loop For
Na terceira parte voc√™ aprender√° sobre l√≥gica de programa√ß√£o e algoritmos:
JavaScript - L√≥gica de Programa√ß√£o e Algoritmos
A quarta parte aborda objetos, for/in e fun√ß√µes:
JavaScript - Objetos e fun√ß√µes
Agora vamos ao projeto Playground Functions:
Playground functions

Vamos come√ßar!



O que vamos aprender?
Neste dia voc√™ vai oficialmente come√ßar a aprender com tudo uma linguagem de programa√ß√£o - um passo important√≠ssimo na sua ma-ra-vi-lho-sa jornada pelo mundo da programa√ß√£o! üéâ
At√© agora, voc√™ vem aprendendo como navegar no seu ambiente de desenvolvimento, como organizar seu trabalho e como criar estrutura e estilos para p√°ginas da Web com o HTML e o CSS. A partir de agora, voc√™ vai aprender a implementar l√≥gica nas suas p√°ginas, tornando-as verdadeiramente interativas e din√¢micas!
Hoje, vamos aprender:
O que √© o JavaScript (JS)?
De onde surgiu?
Qual o seu uso?
Vari√°veis.
Constantes.
Tipos primitivos.
Tipagem din√¢mica.
Operadores aritm√©ticos.
Operadores de atribui√ß√£o.
Operadores l√≥gicos.
Estruturas condicionais como if/else e switch/case.



Voc√™ ser√° capaz de:
Escrever c√≥digos em JavaScript que usam vari√°veis, constantes e tipos primitivos;
Utilizar conceitos da linguagem como a tipagem din√¢mica e operadores l√≥gicos/aritm√©ticos/de atribui√ß√£o no seu c√≥digo;
Criar c√≥digos que usam estruturas condicionais, como o if/else.



Por que isso √© importante?
Existem in√∫meros motivos que atestam pela import√¢ncia imensa desse passo, mas vamos falar sobre tr√™s:
JavaScript √© popular. O JavaScript vem sendo, nos √∫ltimos 8 anos, a linguagem de programa√ß√£o mais popular do mundo, segundo a √∫ltima pesquisa do Stack Overflow.
Ele √© respons√°vel pela grande maioria das intera√ß√µes em tempo real na web que √© poss√≠vel nos dias de hoje. Sabe quando voc√™ est√° em uma p√°gina com um chat, e as mensagens chegam "sozinhas"? Isso √© JavaScript. Ou quando voc√™ acessa um perfil diferente no Facebook, mas seu navegador n√£o carrega a p√°gina do zero, somente carregando o que de fato mudou? Tamb√©m √© JavaScript (com o React üôÇ).
JavaScript √© vers√°til. O uso do JavaScript na Web √© bem √≥bvio - √© onde ele surgiu. No entanto, o JavaScript possui bibliotecas, frameworks e ambientes runtime que permitem que voc√™ use JavaScript tamb√©m para muitas outras coisas, como:
C√≥digo que roda no servidor (back-end), com o Node, por exemplo;
Acesso e manipula√ß√£o de bancos de dados atrav√©s de diversos drivers;
Aplicativos mobile nativos, com o React Native, por exemplo;
Aplicativos desktop, com o Electron, por exemplo;
Todos esses usos j√° foram e s√£o feitos por empresas de todos os portes. Aprender JavaScript √© a porta para um mundo infinito de possibilidades. üöÄ
JavaScript √© a base para o curso da Trybe. Por √∫ltimo, mas n√£o menos importante, o JavaScript √© o fundamento principal para a maior parte do curso da Trybe, tanto agora, no m√≥dulo de Fundamentos, quanto no m√≥dulo de Front-End e no de Back-End. √â de vital import√¢ncia ter uma boa base de JavaScript para entender React, Redux, Jest, Node e todas essas outras ferramentas que voc√™ vai adicionar √† sua caixa.
Por fim, saiba que √© muito importante aprender JavaScript e ter foco. Mas n√£o se preocupe, esse √© s√≥ o primeiro passo no mundo da programa√ß√£o.
Tenha em mente que JavaScript √© uma linguagem de programa√ß√£o e, como tal, √© apenas uma ferramenta. O verdadeiro trabalho e o verdadeiro objetivo √© resolver problemas. O mais importante √© que voc√™ aprenda a programar e a aprender - JavaScript √© s√≥ a ferramenta principal que vai te ajudar a alcan√ßar esse objetivo.



Conte√∫dos
Agora √© hora de voc√™ aprender os fundamentos de JavaScript com um apanhado de conte√∫dos que v√£o te dar a base necess√°ria para criar seus primeiros programas. üòÅ
Mas, antes de darmos in√≠cio ao conte√∫do, vamos instalar um pacote que ser√° muito √∫til durante toda a nossa caminhada no JavaScript, o Node.js.
Como o JS nasceu como uma linguagem de navegador, n√£o pod√≠amos execut√°-lo fora do navegador, mas o Node.js foi criado para resolver esse problema. √â por causa dele que n√£o dependeremos do navegador para executar c√≥digos JS.
Para instal√°-lo, primeiramente precisaremos do nvm (node version manager), que √© um gerenciador de vers√µes do node. Identifique o sistema operacional que voc√™ est√° usando e siga o passo a passo dispon√≠vel nas sess√µes a seguir.



Instala√ß√£o do Node para Linux
Para a instala√ß√£o do nvm no linux utilizaremos o comando curl. Caso ainda n√£o tenha instalado esse comando em seu computador, ser√° necess√°rio instal√°-lo. Para fazer isso execute os seguintes comandos:
Atualize seu sistema:
Copiar
sudo apt update && sudo apt upgrade
Instale o curl:
Copiar
sudo apt install curl
Caso queira verificar a sua vers√£o do curl execute esse comando:
Copiar
curl --version
Pronto, agora com o curl preparado, √© hora de instalar o nvm. Rode o seguinte comando em seu terminal:
Copiar
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
Nota: Caso tenha alterado o terminal padr√£o que vem em seu linux de bash para o zsh (ou algum outro), troque bash por zsh na linha de c√≥digo (ou a abrevia√ß√£o de seu shell script).
N√£o podemos utilizar o nvm ainda, pois para isso √© preciso reiniciar ou abrir outra janela em seu terminal. Mas podemos checar a vers√£o instalada com o seguinte comando:
Copiar
nvm -v
Agora vamos escolher uma vers√£o para instalar em nosso computador. O comando a seguir instala a vers√£o mais recente do nvm.
Copiar
nvm install --lts
Uma coisa legal do nvm √© que podemos ter diversas vers√µes instaladas, e para instalar outra vers√£o basta digitar o comando anterior e alterar o campo --lts para o n√∫mero da vers√£o desejada. Na maior parte dos projetos da Trybe utilizamos a vers√£o LTS do node.
Esse procedimento j√° instala tamb√©m o npm. Para checar a vers√£o instalada, basta executar o seguinte comando:
Copiar
npm -v
Voc√™ pode entender mais sobre o npm acessando sua documenta√ß√£o
Caso queira transitar entre as vers√µes instaladas basta digitar em seu terminal nvm use <vers√£o desejada>, por exemplo:
Copiar
nvm use 16
ou
Copiar
nvm use --lts
Para configurar a vers√£o do node como padr√£o, execute o seguinte comando:
Copiar
nvm alias default 16
Ap√≥s a execu√ß√£o do comando, feche e abra o terminal novamente.
Tudo pronto, agora vamos para nosso conte√∫do de JavaScript?
Para saber mais sobre o nvm, acesse sua documenta√ß√£o aqui.



Instala√ß√£o do Node para Mac
Para a instala√ß√£o do nvm no mac utilizaremos o comando curl. Caso ainda n√£o tenha instalado esse comando em seu computador, ser√° necess√°rio instal√°-lo. Para fazer isso execute os seguintes comandos:
Copiar
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null 2> /dev/null
E depois:
Copiar
brew install curl
Com o curl j√° instalado, faremos a instala√ß√£o do nvm, em seu terminal cole o seguinte c√≥digo:
Copiar
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
Espere que tudo seja conclu√≠do e v√° para o diret√≥rio home. Caso n√£o saiba como fazer isso, execute o seguinte comando:
Copiar
cd ~
Precisaremos editar o arquivo bash_profile. Para isso, digite em seu terminal:
Copiar
nano .bash_profile
Esse comando abrir√° o arquivo dentro do terminal e o pr√≥ximo passo √© colar o conte√∫do a seguir nele:
Copiar
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
Ao reiniciar o terminal, o nvm deve estar pronto.
Agora vamos escolher uma vers√£o para instalar em nosso computador. O comando a seguir instala a vers√£o mais recente do nvm.
Copiar
nvm install --lts
Uma coisa legal do nvm √© que podemos ter diversas vers√µes instaladas, e para instalar outra vers√£o basta digitar o comando anterior e alterar o campo --lts para o n√∫mero da vers√£o desejada. Na maior parte dos projetos da Trybe utilizamos a vers√£o LTS do node.
Esse procedimento j√° instala tamb√©m o npm. Para checar a vers√£o instalada, basta executar o seguinte comando:
Copiar
npm -v
Voc√™ pode entender mais sobre o npm acessando sua documenta√ß√£o
Caso queira transitar entre as vers√µes instaladas basta digitar em seu terminal nvm use <vers√£o desejada>, por exemplo:
Copiar
nvm use 16
ou
Copiar
nvm use --lts
Para configurar a vers√£o do node como padr√£o, execute o seguinte comando:
Copiar
nvm alias default 16
Ap√≥s a execu√ß√£o do comando, feche e abra o terminal novamente.
Tudo pronto, agora vamos para nosso conte√∫do de JavaScript?
Para saber mais sobre o nvm, acesse sua documenta√ß√£o aqui



Vari√°veis
Agora vamos aprender como funcionam e o que s√£o vari√°veis e constantes.

üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ
üöÄ Vamos praticar o que aprendemos no v√≠deo? üí™
Abra o seu VS Code e fa√ßa os exerc√≠cios a seguir.
*Dica: Com o plugin Code Runner que vimos no v√≠deo voc√™ pode executar o seu c√≥digo no VS Code com o atalho ctrl + alt + n. Aqui voc√™ encontra mais sobre o Code Runner e sobre outras extens√µes √∫teis para o VS Code!
Crie uma constante chamada myName e atribua a ela o seu nome (Exemplo: Carolina).
Crie uma constante chamada birthCity e atribua a ela a sua cidade natal.
Crie uma vari√°vel chamada birthYear e atribua a ela o ano em que voc√™ nasceu.
Utilize o console.log() para imprimir as constantes e vari√°veis que voc√™ criou.
Altere o valor atribu√≠do √† vari√°vel birthYear para 2030. Fa√ßa um console.log(birthYear) novamente para ver o que acontece!
Altere o valor atribu√≠do √† constante birthCity. Fa√ßa um console.log(birthCity) novamente! Voc√™ saberia explicar por que recebemos uma mensagem de erro? ü§î



Tipos Primitivos, Tipagem Din√¢mica e Opera√ß√µes Aritm√©ticas
Agora que voc√™ j√° sabe o que s√£o vari√°veis e constantes, vamos entender quais s√£o os tipos primitivos, como o JS escolhe o tipo de uma vari√°vel atrav√©s da tipagem din√¢mica e como realizar opera√ß√µes aritm√©ticas.

Agora √© a hora da m√£o na massa no c√≥digo! No exemplo abaixo, temos as informa√ß√µes de um paciente. Utilize o operador typeof para imprimir qual o tipo das vari√°veis patientId, isEnrolled, patientInfo e patientEmail. Esse operador retorna qual o tipo de uma vari√°vel, objeto, fun√ß√£o ou express√£o. Exemplo: console.log(typeof patientId) retornar√° number.
Copiar
let patientId = 50;
let isEnrolled = true;
const patientInfo = {
  firstName: 'Ana',
  lastName: 'Santos',
};
const patientEmail = 'ana@email.com';
O que aconteceria se tent√°ssemos checar qual o tipo da vari√°vel patientAge? Experimente executar o comando console.log(typeof patientAge) e veja o que acontece! U√©...mas n√£o declaramos essa vari√°vel, n√£o √© mesmo? √â exatamente por esse motivo que o seu tipo √© undefined, como voc√™ p√¥de observar no retorno do console.log(typeof patientAge). Experimente tamb√©m trocar o valor de patientId = 50 para patientId = '50'. Execute novamente um console.log() para imprimir o tipo dessa vari√°vel ap√≥s a modifica√ß√£o. Voc√™ ver√° que o retorno agora √© uma string pois colocamos o n√∫mero 50 dentro das aspas. O JavaScript interpreta como string tudo o que estiver entre aspas.
üöÄ Agora que voc√™ j√° conhece os operadores aritm√©ticos b√°sicos do JavaScript, vamos pratic√°-los? Voc√™ pode consultar a lista de operadores na tabela JavaScript Arithmetic Operators dispon√≠vel nesse link se tiver d√∫vidas. Vamos fazer algumas opera√ß√µes simples para encontrarmos a √°rea e o per√≠metro de um ret√¢ngulo de base 5 e altura 8.
Crie uma constante chamada base e uma vari√°vel chamada height e atribua os seus respectivos valores: 5 e 8.
Crie uma constante chamada area e atribua a ela o resultado da multiplica√ß√£o da base pela altura. Dica: lembre-se de usar sempre o console.log() para imprimir as vari√°veis e checar os resultados das opera√ß√µes!
Crie uma constante chamada perimeter e atribua a ela a soma de todos os lados do ret√¢ngulo.




Condi√ß√µes If e Else
Hora de aprender sobre operadores de atribui√ß√£o e operadores l√≥gicos. Vamos l√°?

üöÄ Criar estruturas condicionais com operadores if/else e operadores l√≥gicos ser√° algo muito comum na sua carreira de pessoa desenvolvedora. Ent√£o vamos praticar o que aprendemos no v√≠deo?
Crie uma constante que receba a nota de uma pessoa candidata em um desafio t√©cnico, e atribua a ela um valor entre 1 e 100;
Implemente uma l√≥gica que verifique se a pessoa candidata foi aprovada, reprovada ou se ela est√° na lista de espera. Para isso, considere as seguintes informa√ß√µes:
Se a nota for maior ou igual a 80, imprima "Parab√©ns, voc√™ foi aprovada(o)!"
Se a nota for menor que 80 e maior ou igual a 60, imprima "Voc√™ est√° na nossa lista de espera"
Se a nota for menor que 60, imprima "Voc√™ foi reprovada(o)"
Crie uma estrutura condicional utilizando o if, else if e else para criar o seu algoritmo, e os operadores l√≥gicos que se aplicam a cada situa√ß√£o.
Altere o valor da nota para verificar se as condi√ß√µes que voc√™ implementou funcionam;




Operadores l√≥gicos
Neste ponto, voc√™ deve entender que valores booleanos podem ser "true" ou "false". Eles ser√£o de extrema import√¢ncia para a constru√ß√£o de l√≥gicas no momento em que estivermos desenvolvendo nossas aplica√ß√µes. A pr√≥xima ferramenta de trabalho que iremos aprender ser√£o os operadores l√≥gicos. Eles n√£o s√£o utilizados s√≥ na programa√ß√£o, mas no estudo da l√≥gica em si e no seu dia a dia (e com bastante frequ√™ncia). A principal funcionalidade desses operadores √© determinar a l√≥gica entre dois valores ou vari√°veis.
Na linguagem JavaScript, temos tr√™s principais operadores l√≥gicos: &&, || e o !. Podemos nos referir a eles como "AND", "OR" e "NOT", respectivamente.
Essas ferramentas n√£o v√£o te acompanhar apenas no JavaScript, mas em toda sua carreira. Por isso, √© muito importante praticar bastante e ficar bem familiarizado com o conceito de cada um deles.
Operador AND
Esse operador √© bin√°rio. O que significa que ele precisa de dois elementos para funcionar corretamente.
Para abstrair seu funcionamento, pense o seguinte: Voc√™ est√° numa padaria e quer comer alguma coisa no caf√© da manh√£. Ent√£o voc√™ diz "Por favor, me v√™ um cafezinho E um p√£o na chapa".
Seria muito infeliz se voc√™ recebesse apenas o caf√© ou s√≥ o p√£o, n√£o √©? Tamb√©m n√£o seria legal se receb√™ssemos um p√£o na chapa, mas a nossa bebida ser um caldo de cana. Porque nossa expectativa era de que as duas condi√ß√µes fossem atendidas corretamente. Esse √© exatamente o papel do &&. Ele s√≥ vai retornar true se as duas opera√ß√µes que est√£o em volta dele forem consideradas verdadeiras.
Em JavaScript, nosso pedido poderia ser interpretado da seguinte maneira:
Copiar
const comida = 'p√£o na chapa';
const bebida = 'cafezinho';

if (bebida === 'cafezinho' && comida === 'p√£o na chapa') {
  console.log('Muito obrigado pela refei√ß√£o :)');
} else {
  console.log('Acho que houve um engano com meu pedido');
}
Tente brincar e mude os valores das vari√°veis, voc√™ ver√° que a condi√ß√£o n√£o vai ser atendida e portanto, a mensagem imprimida ser√° outra.
Precisamos manter em mente que s√≥ teremos true se as duas express√µes em volta dele forem true tamb√©m.
Copiar
  const conditionOne = true;
  const conditionTwo = false;

  console.log(conditionOne && conditionTwo);
Execute o c√≥digo acima e veja que a verifica√ß√£o √© false porque uma das condi√ß√µes n√£o √© true.
Mas... E o que acontece se existir um encadeamento de &&? ü§î
Imagine que exista a seguinte express√£o:
Copiar
const cenouras = true;
const leite = true;
const arroz = true;
const feijao = true;

const listaDeCompras = cenouras && leite && arroz && feijao;
Voc√™ consegue imaginar qual ser√° o resultado final? Ser√° que vai dar erro?
A ordem que a opera√ß√£o vai obedecer, ser√° da esquerda para a direita, seguindo algo parecido com a imagem abaixo.

Encadeamento de operadores AND
Abaixo tem um mini cheat sheet para voc√™ ver em quais possibilidades teremos resposta true ou false.
Copiar
console.log(true && true); // true
console.log(true && false); // false
console.log(false && true); // false
console.log(false && false); // false
Crie uma constante chamada "currentHour" que recebe um n√∫mero entre 4 e 24 de sua escolha, para representar as horas do dia.
Crie uma vari√°vel chamada "message" que, inicialmente, √© uma string vazia.
Implemente condicionais para que:
Se o hor√°rio for maior ou igual a 22, insira "N√£o dever√≠amos comer nada, √© hora de dormir" na vari√°vel "message".
Se o hor√°rio for maior ou igual a 18 e menor que 22, insira "Rango da noite, vamos jantar :D" na vari√°vel "message".
Se o hor√°rio for maior ou igual a 14 e menor que 18, insira "Vamos fazer um bolo pro caf√© da tarde?" na vari√°vel "message".
Se o hor√°rio estiver entre 11 e 14, insira "Hora do almo√ßo!!!" na vari√°vel "message".
Se o hor√°rio estiver entre 4 e 11, insira "Hmmm, cheiro de caf√© rec√©m passado" na vari√°vel "message".
Agora imprima a vari√°vel message fora das suas condi√ß√µes.
Operador OR
Voc√™ j√° viu um operador em que as duas condi√ß√µes devem ser verdadeiras para que o resultado final seja verdadeiro.
Com o operador OR (ou ||, no JavaScript), precisamos apenas que uma das condi√ß√µes sejam verdadeiras: isso ou aquilo.
Por exemplo, imagine novamente que estamos na padaria, mas nosso pedido agora vai ser diferente. Dessa vez, se n√£o tiver um caf√©, pode ser um suco de laranja. Como escrever√≠amos isso em JavaScript?
Copiar
const bebidaPrincipal =  'cafezinho';
const bebidaAlternativa = 'suco de laranja';

if (bebidaPrincipal === 'cafezinho' || bebidaAlternativa === 'suco de laranja') {
  console.log("Obrigado por me atender :D")
} else {
  console.log("Ei, eu n√£o pedi isso!");
}
O s√≠mbolo "||" √© a representa√ß√£o em caractere desse operador. Novamente, precisamos de dois elementos em torno dele para que funcione corretamente. E para que seu retorno seja verdadeiro, um de seus valores deve ser true ou ser considerado truthy.
Abaixo temos uma tabela mostrando como √© o resultado de cada opera√ß√£o, assim como no operador "AND":
Copiar
console.log(true || true); // true
console.log(true || false); // true
console.log(false || true); // true
console.log(false || false); // false
Crie uma vari√°vel chamada "weekDay" que recebe a string "quarta-feira".
Implemente condicionais para que:
Se nossa vari√°vel "weekDay" for "segunda-feira", "ter√ßa-feira", "quarta-feira", "quinta-feira" ou "sexta-feira", imprima "Oba, mais um dia de aprendizado na Trybe >:D".
Se for algum dia de fim de semana, imprima "FINALMENTE, descanso merecido UwU".
Experimente trocar o valor da string ou at√© mesmo montar seu pr√≥prio algoritmo. Esse assunto √© muito importante para seu aprendizado :).
Operador NOT
Vamos iniciar com um exemplo do que o NOT √© capaz, voc√™ consegue prever o que esse c√≥digo vai imprimir?
Copiar
  console.log((2 + 2) === 4);
Isso aqui deve nos retornar true, n√£o √©? Afinal, 2 + 2 resultar em 4 √© uma declara√ß√£o verdadeira. Agora, se adicionarmos o operador NOT antes dessa declara√ß√£o?
Copiar
  console.log(!(2 + 2) === 4);
Se voc√™ executar esse c√≥digo, vai perceber que o valor impresso √© o oposto do anterior. ü§î
Estamos diante de um operador muito poderoso. Ele pode inverter o valor booleano de um elemento. Isso mesmo!! Se tivermos uma vari√°vel ou valor considerado true, podemos gerar o resultado oposto simplesmente fazendo !vari√°vel. Ou seja, false.
Ent√£o, sabendo que o resultado original da opera√ß√£o ali em cima √© true, quando a gente insere o operador NOT antes da opera√ß√£o, teremos o valor contr√°rio a nossa resposta final, que √© false.
Vale lembrar que o conceito de truthy e falsy tamb√©m se aplica aqui, por isso n√£o estamos limitados apenas aos tipos primitivos booleanos. Podemos usar em:
Strings...
Copiar
const squirtle = "melhor pokemon inicial";

console.log(!squirtle); // false
N√∫meros...
Copiar
console.log(!42); // false

console.log(!0); // true
// O n√∫mero 0 tem o valor "falsy" no javascript. Logo, seu oposto √© true.
Valores nulos...
Copiar
console.log(!null); // true
Valores indefinidos..
Copiar
console.log(!undefined); // true
...e em muitos outros elementos. As possibilidades s√£o enormes!!!




Switch e Case
E, no final do conte√∫do de hoje, voc√™ vai aprender uma outra forma de criarmos estruturas condicionais com o switch/case.
O switch/case funciona de maneira similar ao if/else, por√©m com algumas diferen√ßas.
No switch/case colocamos dentro do switch o que deve ser analisado e ent√£o criamos nossas condicionais com o case. Veja o exemplo abaixo:
Copiar

// Nesse exemplo o "switch/case" dever√° imprimir no terminal a classifica√ß√£o de quais filmes podem ser assistidos
// de acordo com a faixa et√°ria de uma pessoa.

let faixaEtaria = 'adulto';

switch (faixaEtaria) {
  case 'adolescente':
    // Caso a vari√°vel seja "adolescente" ent√£o entraremos na l√≥gica abaixo.

    console.log('Consulte a classifica√ß√£o do filme');
    // Quando a pessoa for adolescente essa ser√° a mensagem impressa no console.

    break;
    
    // O "break" serve para que o c√≥digo n√£o continue rodando caso seu resultado j√° tenha sido atingido
  case 'adulto':
    // Ap√≥s implementar a l√≥gica de um case, voc√™ pode abrir outro case.
    // Agora vamos fazer a l√≥gica do que deve ocorrer se a pessoa for adulta

    console.log('A pessoa adulta √© classificada para assistir qualquer filme')
    //caso seja adulto essa mensagem dever√° aparecer no terminal

    break;
    // Interrompemos o fluxo novamente caso a pessoa seja adulta
    case 'idoso':
      // Repetimos o mesmo processo para o case "idoso"
      console.log('A pessoa idosa √© classificada para assistir qualquer filme');
      break
  default:
    // O "default" √© utilizado como um retorno padr√£o caso o valor passado n√£o encaixe em nenhum dos cases
    // Ou seja, se a pessoa, for crian√ßa, rec√©m nascida, ou pertencente √† qualquer outra faixa et√°ria, essa ser√° a l√≥gica implementada.
    console.log('s√≥ pode assistir filmes livres');
    // note que n√£o √© necess√°rio utilizar o break ap√≥s o default. Como todo o c√≥digo j√° foi executado, n√£o precisamos interromper o funcionamento do mesmo.
Bacana n√©? Teste agora outos valores para vari√°vel usando as faixas et√°rias: 'idoso', 'adolescente' e 'crian√ßa'. Observe o c√≥digo e cada resultado obtido.
Algo muito legal, √© que voc√™ pode utilizar o switch case para diversas coisas, n√£o s√≥ para imprimir um valor no terminal. No exemplo a seguir, voc√™ ver√° que √© poss√≠vel alterar o valor de uma vari√°vel:
Copiar

mes = 'maio';
let estacaoDoAno = '?';

switch (mes) {
    case 'janeiro':
    case 'fevereiro':
    case 'mar√ßo':
        estacaoDoAno = 'Ver√£o';
        break;
    case 'abril':
    case 'maio':
    case 'junho':
        estacaoDoAno = 'Outono';
        break;
    case 'julho':
    case 'agosto':
    case 'setembro':
        estacaoDoAno = 'Inverno';
        break;
    case 'outubro':
    case 'novembro':
    case 'dezembro':
        estacaoDoAno = 'Primavera';
}

console.log(estacaoDoAno); // 'Outono'
Note que n√£o foi necess√°rio escrever a esta√ß√£o do ano √† cada case, se v√°rios cases implementam a mesma l√≥gica, basta escrever um abaixo do outro e ent√£o escrever a l√≥gica. Legal, n√©?
Tamb√©m n√£o foi colocado um default, assim o c√≥digo n√£o altera o valor da vari√°vel estacaoDoAno caso voc√™ passe um valor inv√°lido para a vari√°vel mes. Tente trocar o valor da vari√°vel mes para 'Trybe' e veja o que acontece.
Veja agora a cria√ß√£o de um switch/case do zero:

Voc√™ com certeza est√° super feliz com seus novos conhecimentos sobre JS, n√£o √©?! üéâ Ent√£o vamos praticar mais um pouco antes de chegar na sess√£o de exerc√≠cios. Vamos!!!
Crie uma vari√°vel para armazenar o estado da pessoa candidata no processo seletivo, que pode ser: 'aprovada', 'lista' ou 'reprovada';
Crie uma estrutura condicional com o switch/case que ir√° imprimir as mensagens do exerc√≠cio anterior se o estado da pessoa candidata for 'aprovada', 'lista' ou 'reprovada'. Como default, imprima a mensagem de 'n√£o se aplica'.
A estrutura switch/case √© utilizada quando queremos executar diferentes a√ß√µes. A express√£o que passamos para o switch √© avaliada apenas uma vez, e o seu valor √© comparado em cada caso. Se essa compara√ß√£o for verdadeira, o c√≥digo do caso avaliado √© executado. Se nenhum valor satisfizer os casos listados, √© executado o c√≥digo em default.




Exerc√≠cios
A seguir voc√™ ver√° uma se√ß√£o orientando a como realizar o versionamento do seu c√≥digo. Al√©m disso, tamb√©m temos um conte√∫do focado nisso e em como organizar seus exerc√≠cios, voc√™ pode acess√°-lo aqui.
No conte√∫do que criamos, ser√° apresentada para voc√™ uma estrutura de organiza√ß√£o utilizando pastas para m√≥dulos e para blocos. Essa estrutura √© diferente da que voc√™ ver√° a seguir na se√ß√£o de versionamento do c√≥digo, fica a seu crit√©rio decidir qual a melhor forma de organizar seus exerc√≠cios!
fundamentos
Antes de come√ßar: versionando seu c√≥digo
Para versionar seu c√≥digo, utilize o seu reposit√≥rio de exerc√≠cios. üòâ
Abaixo voc√™ vai ver exemplos de como organizar os exerc√≠cios do dia em uma branch, com arquivos e commits espec√≠ficos para cada exerc√≠cio. Voc√™ deve seguir este padr√£o para realizar os exerc√≠cios a seguir.
Abra a pasta de exerc√≠cios:
Copiar
$ cd ~/trybe-exercicios
Certifique-se de que est√° na branch main e ela est√° sincronizada com a remota. Caso voc√™ tenha arquivos modificados e n√£o comitados, dever√° fazer um commit ou checkout dos arquivos antes deste passo.
Copiar
$ git checkout main
$ git pull
A partir da main, crie uma branch com o nome exercicios/4.1 (bloco 4, dia 1)
Copiar
$ git checkout -b exercicios/4.1
Caso seja o primeiro dia deste m√≥dulo, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir fundamentos
$ cd fundamentos
Caso seja o primeiro dia do bloco, crie um diret√≥rio para ele e o acesse na sequ√™ncia:
Copiar
$ mkdir bloco-4-introducao-a-javascript-e-logica-de-programacao
$ cd bloco-4-introducao-a-javascript-e-logica-de-programacao
Crie um diret√≥rio para o dia e o acesse na sequ√™ncia:
Copiar
$ mkdir dia-1-javascript-primeiros-passos
$ cd dia-1-javascript-primeiros-passos
Os arquivos referentes aos exerc√≠cios deste dia dever√£o ficar dentro do diret√≥rio ~/trybe-exercicios/fundamentos/block-4-introducao-a-javascript-e-logica-de-programacao/dia-1-javascript-primeiros-passos. Lembre-se de fazer commits pequenos e com mensagens bem descritivas, preferencialmente a cada exerc√≠cio resolvido.

Verifique os arquivos alterados/adicionados:
Copiar
$ git status
On branch exercicios/4.1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   exercicio-1

Adicione os arquivos que far√£o parte daquele commit:
Copiar
# Se quiser adicionar os arquivos individualmente
$ git add caminhoParaArquivo

# Se quiser adicionar todos os arquivos de uma vez, por√©m, atente-se
para n√£o adicionar arquivos indesejados acidentalmente
$ git add --all

Fa√ßa o commit com uma mensagem descritiva das altera√ß√µes:
Copiar
$ git commit -m "Mensagem descrevendo altera√ß√µes"
Voc√™ pode visualizar o log de todos os commits j√° feitos naquela branch com git log.
Copiar
$ git log
commit 100c5ca0d64e2b8649f48edf3be13588a77b8fa4 (HEAD -> exercicios/4.1)
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 17:48:01 2019 -0300

    Exercicio 2 - mudando o evento de click para mouseover, tirei o alert e coloquei pra quando clicar aparecer uma imagem do lado direito da tela

commit c0701d91274c2ac8a29b9a7fbe4302accacf3c78
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 16:47:21 2019 -0300

    Exercicio 2 - adicionando um alert, usando fun√ß√£o e o evento click

commit 6835287c44e9ac9cdd459003a7a6b1b1a7700157
Author: Tryber Bot <tryberbot@betrybe.com>
Date:   Fry Sep 27 15:46:32 2019 -0300

    Resolvendo o exerc√≠cio 1 usando eventListener
Agora que temos as altera√ß√µes salvas no reposit√≥rio local precisamos envi√°-las para o reposit√≥rio remoto. No primeiro envio, a branch exercicios/4.1 n√£o vai existir no reposit√≥rio remoto, ent√£o precisamos configurar o remote utilizando a op√ß√£o --set-upstream (ou -u, que √© a forma abreviada).
Copiar
$ git push -u origin exercicios/4.1
Ap√≥s realizar o passo 9, podemos abrir a Pull Request a partir do link que aparecer√° na mensagem do push no terminal, ou na p√°gina do seu reposit√≥rio de exerc√≠cios no GitHub atrav√©s de um bot√£o que aparecer√° na interface. Escolha a forma que preferir e abra a Pull Request. De agora em diante, voc√™ repetir√° o fluxo a partir do passo 7 para cada exerc√≠cio adicionado, por√©m como j√° definimos a branch remota com -u anteriormente, agora podemos simplificar os comandos para:
Copiar
# Quando quiser enviar para o reposit√≥rio remoto
$ git push

# Caso voc√™ queria sincronizar com o remoto, poder√° utilizar apenas
$ git pull
Quando terminar os exerc√≠cios, seus c√≥digos devem estar todos commitados na branch exercicios/4.1, e dispon√≠veis no reposit√≥rio remoto do GitHub. Pra finalizar, compartilhe o link da Pull Request no canal de Code Review para a monitoria e/ou colegas revisarem. Fa√ßa review voc√™ tamb√©m, lembre-se que √© muito importante para o seu desenvolvimento ler o c√≥digo de outras pessoas. ü§úüèºü§õüèº




Agora a pr√°tica
Nos exerc√≠cios de hoje, voc√™ vai fazer quinze pequenos programas. Todos trabalham a l√≥gica condicional (if/else e switch/case), operadores aritm√©ticos (+, -, *, /, %) e operadores l√≥gicos (>, <, &&, ||). Para que consiga executar seus c√≥digos recomendamos que utilize a extens√£o Code Runner, voc√™ pode ver mais sobre ela no conte√∫do que fizemos sobre o uso do VS Code.
Fa√ßa cinco programas, um para cada opera√ß√£o aritm√©tica b√°sica. Seu programa deve ter duas constantes, a e b, definidas no come√ßo com os valores que ser√£o operados. Fa√ßa programas para:
Adi√ß√£o (a + b)
Subtra√ß√£o (a - b)
Multiplica√ß√£o (a * b)
Divis√£o (a / b)
M√≥dulo (a % b)
*Dica: Neste link voc√™ encontra mais detalhes sobre operadores matem√°ticos üòâ
Fa√ßa um programa que retorne o maior de dois n√∫meros. Defina no come√ßo do programa duas constantes com os valores que ser√£o comparados.
Fa√ßa um programa que retorne o maior de tr√™s n√∫meros. Defina no come√ßo do programa tr√™s constantes com os valores que ser√£o comparados.
Fa√ßa um programa que, dado um valor definido numa constante, retorne "positive" se esse valor for positivo, "negative" se for negativo e "zero" caso contr√°rio.
üöÄ Fa√ßa um programa que defina tr√™s constantes com os valores dos tr√™s √¢ngulos internos de um tri√¢ngulo. Retorne true se os √¢ngulos representarem os √¢ngulos de um tri√¢ngulo e false, caso contr√°rio. Se algum √¢ngulo for inv√°lido o programa deve retornar uma mensagem de erro.
Para os √¢ngulos serem de um tri√¢ngulo v√°lido, a soma dos tr√™s devem ser 180 graus.
Um √¢ngulo ser√° considerado inv√°lido se n√£o tiver um valor positivo.
Escreva um programa que receba o nome de uma pe√ßa de xadrez e retorne os movimentos que ela faz.
Como desafio, fa√ßa o programa funcionar tanto se receber o nome de uma pe√ßa com letras mai√∫sculas quanto com letras min√∫sculas, sem aumentar a quantidade de condicionais.
Como dica, voc√™ pode pesquisar uma fun√ß√£o que faz uma string ficar com todas as letras min√∫sculas (lower case).
Se a pe√ßa passada for inv√°lida, o programa deve retornar uma mensagem de erro.
Exemplo: bishop (bispo) -> diagonals (diagonais)
Escreva um programa que converte uma nota dada em porcentagem (de 0 a 100) em conceitos de A a F. Siga essas regras:
Porcentagem >= 90 -> A
Porcentagem >= 80 -> B
Porcentagem >= 70 -> C
Porcentagem >= 60 -> D
Porcentagem >= 50 -> E
Porcentagem < 50 -> F
O programa deve retornar uma mensagem de erro e encerrar se a nota passada for menor que 0 ou maior que 100.
üöÄ Escreva um programa que defina tr√™s n√∫meros em constantes e retorne true se pelo menos uma das tr√™s for par. Caso contr√°rio, ele retorna false.
Bonus: use somente um if.
Escreva um programa que defina tr√™s n√∫meros em constantes e retorne true se pelo menos uma das tr√™s for √≠mpar. Caso contr√°rio, ele retorna false.
Bonus: use somente um if.
Escreva um programa que se inicie com dois valores em duas constantes diferentes: o custo de um produto e seu valor de venda. A partir dos valores, calcule quanto de lucro (valor de venda descontado o custo do produto) a empresa ter√° ao vender mil desses produtos.
Atente que, sobre o custo do produto, incide um imposto de 20%.
Seu programa tamb√©m deve emitir uma mensagem de erro e encerrar caso algum dos seus valores de entrada seja menor que zero.
O lucro de um produto √© o resultado da subtra√ß√£o do valor de venda pelo custo do mesmo, sendo que o imposto de 20% tamb√©m faz parte do valor de custo.
valorCustoTotal = valorCusto + impostoSobreOCusto
lucro = valorVenda - valorCustoTotal (lucro de um produto)
Uma pessoa que trabalha de carteira assinada no Brasil tem descontados de seu sal√°rio bruto o INSS e o IR. Fa√ßa um programa que, dado um sal√°rio bruto, calcule o l√≠quido a ser recebido.
A nota√ß√£o para um sal√°rio de R$1500,10, por exemplo, deve ser 1500.10. Para as faixas de impostos, use as seguintes refer√™ncias:
INSS (Instituto Nacional do Seguro Social)
Sal√°rio bruto at√© R$ 1.556,94: al√≠quota de 8%
Sal√°rio bruto de R$ 1.556,95 a R$ 2.594,92: al√≠quota de 9%
Sal√°rio bruto de R$ 2.594,93 a R$ 5.189,82: al√≠quota de 11%
Sal√°rio bruto acima de R$ 5.189,82: al√≠quota m√°xima de R$ 570,88
IR (Imposto de Renda)
At√© R$ 1.903,98: isento de imposto de renda
De R$ 1.903,99 a 2.826,65: al√≠quota de 7,5% e parcela de R$ 142,80 a deduzir do imposto
De R$ 2.826,66 a R$ 3.751,05: al√≠quota de 15% e parcela de R$ 354,80 a deduzir do imposto
De R$ 3.751,06 a R$ 4.664,68: al√≠quota de 22,5% e parcela de R$ 636,13 a deduzir do imposto
Acima de R$ 4.664,68: al√≠quota de 27,5% e parcela de R$ 869,36 a deduzir do imposto.
Exemplo: Uma pessoa possui o sal√°rio bruto de R$ 3.000,00. O c√°lculo ser√°:
O sal√°rio bruto est√° entre R$ 2.594,93 e R$ 5.189,82, ent√£o sua al√≠quota para INSS √© de 11%. O INSS ser√° 11% de R$ 3.000, ou seja, R$ 330,00.
Para descobrir o sal√°rio-base, subtraia do sal√°rio bruto a al√≠quota do INSS: R$ 3.000,00 - R$ 330,00 = R$ 2.670,00.
Para pegar o valor do IR, temos um sal√°rio (j√° deduzido o INSS) entre R$ 1.903,99 e 2.826,65, sendo a al√≠quota, ent√£o, de 7.5%, com parcela de R$ 142,80 a deduzir do imposto. Assim, temos:
R$ 2.670,00: sal√°rio com INSS j√° deduzido;
7.5%: al√≠quota de imposto de renda;
R$ 142,80 parcela a se deduzir do imposto.
Fazendo a conta, temos: (7,5% de R$ 2.670,00) - R$ 142,80 = R$ 57,45
O √∫ltimo c√°lculo para conseguir o sal√°rio l√≠quido √© R$ 2.670,00 - R$ 57,45 (sal√°rio-base - valor IR) = R$ 2.612,55.
Resultado: R$ 2.612,55.
Dica: que tal identificar as al√≠quotas com vari√°veis de nomes explicativos?




Recursos adicionais (opcional)
Amou o conte√∫do de hoje? Tenho certeza de que voc√™ vai querer praticar mais e mais! Aqui v√£o alguns recursos adicionais para que voc√™ se prepare ainda mais.
Manual de JS
Artigo com muitos fundamentos de JS
Curso online de JavaScript
Tutoriais de JS
Lista de conte√∫dos sobre JavaScript
If-else programming practice for C


